{"ast":null,"code":"import { getMessageList } from \"../../../../api\";\nimport { getMessage } from \"../../../../api\";\nimport { batchModify } from \"../../../../api\";\nimport { selectLabel } from \"../../../sidebar/sidebar.actions\";\nexport const GET_MESSAGES = \"GET_MESSAGES\";\nexport const GET_MESSAGES_LOAD_IN_PROGRESS = \"GET_MESSAGES_LOAD_IN_PROGRESS\";\nexport const GET_MESSAGES_FAILED = 'GET_MESSAGES_FAILED';\nexport const TOGGLE_SELECTED = \"TOGGLE_SELECTED\";\nexport const MESSAGE_LOAD_IN_PROGRESS = \"MESSAGE_LOAD_IN_PROGRESS\";\nexport const MESSAGE_LOAD_SUCCESS = \"MESSAGE_LOAD_SUCCESS\";\nexport const MESSAGE_LOAD_FAIL = \"MESSAGE_LOAD_FAIL\";\nexport const EMPTY_MESSAGES = \"EMPTY_MESSAGES\";\nexport const SET_PAGE_TOKENS = \"SET_PAGE_TOKENS\";\nexport const ADD_INITIAL_PAGE_TOKEN = \"ADD_INITIAL_PAGE_TOKEN\";\nexport const CLEAR_PAGE_TOKENS = \"CLEAR_PAGE_TOKENS\";\nexport const MODIFY_MESSAGES_SUCCESS = \"MODIFY_MESSAGES_SUCCESS\";\nexport const MODIFY_MESSAGES_FAILED = \"MODIFY_MESSAGES_FAILED\";\nexport const SET_SEARCH_QUERY = \"SET_SEARCH_QUERY\";\nexport const getLabelMessages = ({\n  labelIds,\n  q = \"\",\n  pageToken\n}) => (dispatch, getState) => {\n  dispatch(setMessageListLoadInProgress());\n  const state = getState();\n  const searchQuery = state.searchQuery;\n\n  if (searchQuery !== \"\") {\n    dispatch(selectLabel(\"-1\"));\n  }\n\n  getMessageList({\n    labelIds,\n    maxResults: 20,\n    q: searchQuery,\n    pageToken\n  }).then(response => {\n    dispatch({\n      type: GET_MESSAGES,\n      payload: response\n    });\n    dispatch(setPageTokens({\n      nextPageToken: response.nextPageToken || \"\"\n    }));\n  }).catch(err => {\n    dispatch({\n      type: GET_MESSAGES_FAILED,\n      payload: err\n    });\n  });\n};\nexport const setSearchQuery = q => ({\n  type: SET_SEARCH_QUERY,\n  payload: q\n});\nexport const setPageTokens = tokens => ({\n  type: SET_PAGE_TOKENS,\n  payload: tokens\n});\nexport const emptyLabelMessages = () => ({\n  type: EMPTY_MESSAGES\n});\nexport const toggleSelected = (messageIds, selected) => ({\n  type: TOGGLE_SELECTED,\n  payload: {\n    messageIds,\n    selected\n  }\n});\nexport const getEmailMessage = messageId => dispatch => {\n  dispatch(setMessageLoadInProgress());\n  getMessage(messageId).then(response => {\n    dispatch({\n      type: MESSAGE_LOAD_SUCCESS,\n      payload: response\n    });\n  }).catch(error => {\n    dispatch({\n      type: MESSAGE_LOAD_FAIL,\n      payload: error\n    });\n  });\n};\n\nconst setMessageLoadInProgress = () => ({\n  type: MESSAGE_LOAD_IN_PROGRESS\n});\n\nconst setMessageListLoadInProgress = () => ({\n  type: GET_MESSAGES_LOAD_IN_PROGRESS\n});\n\nexport const addInitialPageToken = token => ({\n  type: ADD_INITIAL_PAGE_TOKEN,\n  payload: token\n});\nexport const clearPageTokens = () => ({\n  type: CLEAR_PAGE_TOKENS\n});\nexport const modifyMessages = ({\n  ids,\n  addLabelIds = [],\n  removeLabelIds = []\n}) => dispatch => {\n  batchModify({\n    ids,\n    addLabelIds,\n    removeLabelIds\n  }).then(modifiedIds => {\n    dispatch({\n      type: MODIFY_MESSAGES_SUCCESS,\n      payload: {\n        modifiedIds,\n        addLabelIds,\n        removeLabelIds\n      }\n    });\n  }).catch(error => {\n    dispatch({\n      type: MODIFY_MESSAGES_FAILED\n    });\n  });\n};","map":{"version":3,"sources":["C:/Users/grigo/OneDrive/Рабочий стол/CRM/src/components/content/message-list/actions/message-list.actions.jsx"],"names":["getMessageList","getMessage","batchModify","selectLabel","GET_MESSAGES","GET_MESSAGES_LOAD_IN_PROGRESS","GET_MESSAGES_FAILED","TOGGLE_SELECTED","MESSAGE_LOAD_IN_PROGRESS","MESSAGE_LOAD_SUCCESS","MESSAGE_LOAD_FAIL","EMPTY_MESSAGES","SET_PAGE_TOKENS","ADD_INITIAL_PAGE_TOKEN","CLEAR_PAGE_TOKENS","MODIFY_MESSAGES_SUCCESS","MODIFY_MESSAGES_FAILED","SET_SEARCH_QUERY","getLabelMessages","labelIds","q","pageToken","dispatch","getState","setMessageListLoadInProgress","state","searchQuery","maxResults","then","response","type","payload","setPageTokens","nextPageToken","catch","err","setSearchQuery","tokens","emptyLabelMessages","toggleSelected","messageIds","selected","getEmailMessage","messageId","setMessageLoadInProgress","error","addInitialPageToken","token","clearPageTokens","modifyMessages","ids","addLabelIds","removeLabelIds","modifiedIds"],"mappings":"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","sourcesContent":["import { getMessageList } from \"../../../../api\";\r\nimport { getMessage } from \"../../../../api\";\r\nimport { batchModify } from \"../../../../api\";\r\nimport { selectLabel } from \"../../../sidebar/sidebar.actions\";\r\n\r\nexport const GET_MESSAGES = \"GET_MESSAGES\";\r\nexport const GET_MESSAGES_LOAD_IN_PROGRESS = \"GET_MESSAGES_LOAD_IN_PROGRESS\";\r\nexport const GET_MESSAGES_FAILED = 'GET_MESSAGES_FAILED';\r\nexport const TOGGLE_SELECTED = \"TOGGLE_SELECTED\";\r\nexport const MESSAGE_LOAD_IN_PROGRESS = \"MESSAGE_LOAD_IN_PROGRESS\";\r\nexport const MESSAGE_LOAD_SUCCESS = \"MESSAGE_LOAD_SUCCESS\";\r\nexport const MESSAGE_LOAD_FAIL = \"MESSAGE_LOAD_FAIL\";\r\nexport const EMPTY_MESSAGES = \"EMPTY_MESSAGES\";\r\nexport const SET_PAGE_TOKENS = \"SET_PAGE_TOKENS\";\r\nexport const ADD_INITIAL_PAGE_TOKEN = \"ADD_INITIAL_PAGE_TOKEN\";\r\nexport const CLEAR_PAGE_TOKENS = \"CLEAR_PAGE_TOKENS\";\r\nexport const MODIFY_MESSAGES_SUCCESS = \"MODIFY_MESSAGES_SUCCESS\";\r\nexport const MODIFY_MESSAGES_FAILED = \"MODIFY_MESSAGES_FAILED\";\r\nexport const SET_SEARCH_QUERY = \"SET_SEARCH_QUERY\";\r\n\r\nexport const getLabelMessages = ({\r\n  labelIds,\r\n  q = \"\",\r\n  pageToken\r\n}) => (dispatch, getState) => {\r\n  dispatch(setMessageListLoadInProgress());\r\n\r\n  const state = getState();\r\n  const {searchQuery} = state;\r\n\r\n  if (searchQuery !== \"\") {\r\n    dispatch(selectLabel(\"-1\"));\r\n  }\r\n\r\n  getMessageList({ labelIds, maxResults: 20, q: searchQuery, pageToken }).then(response => {\r\n    dispatch({\r\n      type: GET_MESSAGES,\r\n      payload: response\r\n    });\r\n\r\n    dispatch(setPageTokens({\r\n      nextPageToken: response.nextPageToken || \"\"\r\n    }));\r\n    \r\n  }).catch(err => {\r\n    dispatch({\r\n      type: GET_MESSAGES_FAILED,\r\n      payload: err\r\n    })\r\n  });\r\n};\r\n\r\nexport const setSearchQuery = q => ({\r\n  type: SET_SEARCH_QUERY,\r\n  payload: q\r\n})\r\n\r\nexport const setPageTokens = tokens => ({\r\n  type: SET_PAGE_TOKENS,\r\n  payload: tokens\r\n});\r\n\r\nexport const emptyLabelMessages = () => ({\r\n  type: EMPTY_MESSAGES\r\n});\r\n\r\nexport const toggleSelected = (messageIds, selected) => ({\r\n  type: TOGGLE_SELECTED,\r\n  payload: {\r\n    messageIds,\r\n    selected\r\n  }\r\n});\r\n\r\nexport const getEmailMessage = messageId => dispatch => {\r\n  dispatch(setMessageLoadInProgress());\r\n  getMessage(messageId)\r\n    .then(response => {\r\n      dispatch({\r\n        type: MESSAGE_LOAD_SUCCESS,\r\n        payload: response\r\n      });\r\n    })\r\n    .catch(error => {\r\n      dispatch({\r\n        type: MESSAGE_LOAD_FAIL,\r\n        payload: error\r\n      });\r\n    });\r\n};\r\n\r\nconst setMessageLoadInProgress = () => ({\r\n  type: MESSAGE_LOAD_IN_PROGRESS\r\n});\r\n\r\nconst setMessageListLoadInProgress = () => ({\r\n  type: GET_MESSAGES_LOAD_IN_PROGRESS\r\n});\r\n\r\nexport const addInitialPageToken = token => ({\r\n  type: ADD_INITIAL_PAGE_TOKEN,\r\n  payload: token\r\n})\r\n\r\nexport const clearPageTokens = () => ({\r\n  type: CLEAR_PAGE_TOKENS\r\n})\r\n\r\nexport const modifyMessages = ({ids, addLabelIds = [], removeLabelIds = []}) => dispatch => {\r\n  batchModify({ids, addLabelIds, removeLabelIds})\r\n    .then(modifiedIds => {\r\n      dispatch({\r\n       type: MODIFY_MESSAGES_SUCCESS,\r\n       payload: {modifiedIds, addLabelIds, removeLabelIds}\r\n      })\r\n    })\r\n    .catch(error => {\r\n      dispatch({\r\n       type: MODIFY_MESSAGES_FAILED\r\n      })\r\n    })\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}