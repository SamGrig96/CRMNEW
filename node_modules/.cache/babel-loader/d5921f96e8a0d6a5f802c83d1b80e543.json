{"ast":null,"code":"export const getBody = (message, mimeType) => {\n  let encodedBody = \"\";\n\n  if (typeof message.parts === \"undefined\") {\n    encodedBody = message.body.data;\n  } else {\n    encodedBody = getHTMLPart(message.parts, mimeType);\n  }\n\n  encodedBody = encodedBody.replace(/-/g, \"+\").replace(/_/g, \"/\").replace(/\\s/g, \"\");\n  return decodeURIComponent(escape(window.atob(encodedBody)));\n};\n\nconst getHTMLPart = (arr, mimeType) => {\n  for (let x = 0; x < arr.length; x++) {\n    if (typeof arr[x].parts === \"undefined\") {\n      if (arr[x].mimeType === mimeType) {\n        return arr[x].body.data;\n      }\n    } else {\n      return getHTMLPart(arr[x].parts, mimeType);\n    }\n  }\n\n  return \"\";\n};\n\nexport const isHTML = str => {\n  const doc = new DOMParser().parseFromString(str, \"text/html\");\n  return Array.from(doc.body.childNodes).some(node => node.nodeType === 1);\n};","map":{"version":3,"sources":["C:/Users/grigo/OneDrive/Рабочий стол/CRM/src/api/utils.jsx"],"names":["getBody","message","mimeType","encodedBody","parts","body","data","getHTMLPart","replace","decodeURIComponent","escape","window","atob","arr","x","length","isHTML","str","doc","DOMParser","parseFromString","Array","from","childNodes","some","node","nodeType"],"mappings":"AAEA,OAAO,MAAMA,OAAO,GAAG,CAACC,OAAD,EAAUC,QAAV,KAAuB;AAC5C,MAAIC,WAAW,GAAG,EAAlB;;AACA,MAAI,OAAOF,OAAO,CAACG,KAAf,KAAyB,WAA7B,EAA0C;AACxCD,IAAAA,WAAW,GAAGF,OAAO,CAACI,IAAR,CAAaC,IAA3B;AACD,GAFD,MAEO;AACLH,IAAAA,WAAW,GAAGI,WAAW,CAACN,OAAO,CAACG,KAAT,EAAgBF,QAAhB,CAAzB;AACD;;AACDC,EAAAA,WAAW,GAAGA,WAAW,CACtBK,OADW,CACH,IADG,EACG,GADH,EAEXA,OAFW,CAEH,IAFG,EAEG,GAFH,EAGXA,OAHW,CAGH,KAHG,EAGI,EAHJ,CAAd;AAIA,SAAOC,kBAAkB,CAACC,MAAM,CAACC,MAAM,CAACC,IAAP,CAAYT,WAAZ,CAAD,CAAP,CAAzB;AACD,CAZM;;AAcP,MAAMI,WAAW,GAAG,CAACM,GAAD,EAAMX,QAAN,KAAmB;AACrC,OAAK,IAAIY,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,GAAG,CAACE,MAAxB,EAAgCD,CAAC,EAAjC,EAAqC;AACnC,QAAI,OAAOD,GAAG,CAACC,CAAD,CAAH,CAAOV,KAAd,KAAwB,WAA5B,EAAyC;AACvC,UAAIS,GAAG,CAACC,CAAD,CAAH,CAAOZ,QAAP,KAAoBA,QAAxB,EAAkC;AAChC,eAAOW,GAAG,CAACC,CAAD,CAAH,CAAOT,IAAP,CAAYC,IAAnB;AACD;AACF,KAJD,MAIO;AACL,aAAOC,WAAW,CAACM,GAAG,CAACC,CAAD,CAAH,CAAOV,KAAR,EAAeF,QAAf,CAAlB;AACD;AACF;;AACD,SAAO,EAAP;AACD,CAXD;;AAaA,OAAO,MAAMc,MAAM,GAAGC,GAAG,IAAI;AAC3B,QAAMC,GAAG,GAAG,IAAIC,SAAJ,GAAgBC,eAAhB,CAAgCH,GAAhC,EAAqC,WAArC,CAAZ;AACA,SAAOI,KAAK,CAACC,IAAN,CAAWJ,GAAG,CAACb,IAAJ,CAASkB,UAApB,EAAgCC,IAAhC,CAAqCC,IAAI,IAAIA,IAAI,CAACC,QAAL,KAAkB,CAA/D,CAAP;AACD,CAHM","sourcesContent":["\r\n\r\nexport const getBody = (message, mimeType) => {\r\n  let encodedBody = \"\";\r\n  if (typeof message.parts === \"undefined\") {\r\n    encodedBody = message.body.data;\r\n  } else {\r\n    encodedBody = getHTMLPart(message.parts, mimeType);\r\n  }\r\n  encodedBody = encodedBody\r\n    .replace(/-/g, \"+\")\r\n    .replace(/_/g, \"/\")\r\n    .replace(/\\s/g, \"\");\r\n  return decodeURIComponent(escape(window.atob(encodedBody)));\r\n};\r\n\r\nconst getHTMLPart = (arr, mimeType) => {\r\n  for (let x = 0; x < arr.length; x++) {\r\n    if (typeof arr[x].parts === \"undefined\") {\r\n      if (arr[x].mimeType === mimeType) {\r\n        return arr[x].body.data;\r\n      }\r\n    } else {\r\n      return getHTMLPart(arr[x].parts, mimeType);\r\n    }\r\n  }\r\n  return \"\";\r\n};\r\n\r\nexport const isHTML = str => {\r\n  const doc = new DOMParser().parseFromString(str, \"text/html\");\r\n  return Array.from(doc.body.childNodes).some(node => node.nodeType === 1);\r\n}"]},"metadata":{},"sourceType":"module"}