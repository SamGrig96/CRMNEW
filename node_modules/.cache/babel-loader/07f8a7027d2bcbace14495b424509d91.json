{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\grigo\\\\OneDrive\\\\\\u0420\\u0430\\u0431\\u043E\\u0447\\u0438\\u0439 \\u0441\\u0442\\u043E\\u043B\\\\CRM\\\\src\\\\components\\\\sidebar\\\\Sidebar.jsx\";\nimport React, { PureComponent } from \"react\";\nimport groupBy from \"lodash/groupBy\";\nimport sortBy from \"lodash/sortBy\";\nimport Menu from \"../menu/menu\";\nimport { faInbox, faEnvelope, faTrash, faCircle, faExclamationCircle } from \"@fortawesome/free-solid-svg-icons\";\nimport LabelItem from \"./LabelItem\";\nimport \"./sidebar.scss\";\nexport class Sidebar extends PureComponent {\n  constructor(props) {\n    super(props);\n    this.state = {\n      selectedLabel: props.pathname\n    }; //this.renderLabels = this.renderLabels.bind(this);\n\n    this.navigateToList = this.navigateToList.bind(this);\n  }\n\n  componentDidMount() {//this.props.getLabelList(); //.then(labels => {});\n\n    /*  */\n    //this.props.getLabelMessages();\n  }\n\n  navigateToList(evt, labelId) {\n    const label = this.props.labelsResult.labels.find(el => el.id === labelId);\n    this.props.onLabelClick(label || {\n      id: \"\"\n    });\n  }\n\n  renderItems(labelList) {\n    if (labelList.length === 0) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 14\n        }\n      });\n    }\n\n    const labels = labelList.reduce((acc, el) => {\n      acc.push(el);\n      return acc;\n    }, []);\n    const labelGroups = groupBy(labels, \"type\");\n    console.log('==================', labelGroups); // const visibleLabels = labelGroups.user.filter(\n    //   el =>\n    //     // el.labelListVisibility === \"labelShow\" ||\n    //     // el.labelListVisibility === \"labelShowIfUnread\" ||\n    //     !el.labelListVisibility || true\n    // );\n    // const sortedLabels = sortBy(visibleLabels, \"name\");\n    // // console.log(visibleLabels)\n    //\n    // return (\n    //   <React.Fragment>\n    //     {this.renderFolders(labelGroups.system)}\n    //     {this.renderLabels(sortedLabels)}\n    //   </React.Fragment>\n    // );\n  }\n\n  renderFolders(labels) {\n    const inboxLabel = { ...labels.find(el => el.id === \"INBOX\"),\n      name: \"Inbox\",\n      icon: faInbox\n    };\n    const sentLabel = { ...labels.find(el => el.id === \"SENT\"),\n      messagesUnread: 0,\n      name: \"Sent\",\n      icon: faEnvelope\n    };\n    const trashLabel = { ...labels.find(el => el.id === \"TRASH\"),\n      messagesUnread: 0,\n      name: \"Trash\",\n      icon: faTrash\n    };\n    const spamLabel = { ...labels.find(el => el.id === \"SPAM\"),\n      name: \"Spam\",\n      icon: faExclamationCircle\n    };\n    const folders = [inboxLabel, sentLabel, trashLabel, spamLabel]; // return (\n    //   // <React.Fragment>\n    //   //   <li key=\"olders-nav-title\" className=\"pl-2 nav-title\">\n    //   //     Folders\n    //   //   </li>\n    //   //   {folders.map(el => {\n    //   //     const iconProps = { icon: el.icon, size: \"lg\" };\n    //   //     return (\n    //   //       <LabelItem\n    //   //         key={el.id + \"_label\"}\n    //   //         onClick={this.navigateToList}\n    //   //         name={el.name}\n    //   //         id={el.id}\n    //   //         messagesUnread={el.messagesUnread}\n    //   //         iconProps={iconProps}\n    //   //         selected={el.selected}\n    //   //       />\n    //   //     );\n    //   //   })}\n    //   // </React.Fragment>\n    // );\n  }\n\n  renderLabels(labels) {\n    return /*#__PURE__*/React.createElement(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"li\", {\n      key: \"olders-nav-title\",\n      className: \"pl-2 nav-title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 9\n      }\n    }, \"Labels\"), labels.map(el => {\n      const iconProps = {\n        icon: faCircle,\n        color: el.color ? el.color.backgroundColor : \"gainsboro\",\n        size: \"sm\"\n      };\n      return /*#__PURE__*/React.createElement(LabelItem, {\n        key: el.id + \"_label\",\n        onClick: this.navigateToList,\n        name: el.name,\n        id: el.id,\n        messagesUnread: el.messagesUnread,\n        iconProps: iconProps,\n        selected: el.selected,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 13\n        }\n      });\n    }));\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Menu, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 9\n      }\n    }), \" */}\");\n  }\n\n}\nexport default Sidebar;","map":{"version":3,"sources":["C:/Users/grigo/OneDrive/Рабочий стол/CRM/src/components/sidebar/Sidebar.jsx"],"names":["React","PureComponent","groupBy","sortBy","Menu","faInbox","faEnvelope","faTrash","faCircle","faExclamationCircle","LabelItem","Sidebar","constructor","props","state","selectedLabel","pathname","navigateToList","bind","componentDidMount","evt","labelId","label","labelsResult","labels","find","el","id","onLabelClick","renderItems","labelList","length","reduce","acc","push","labelGroups","console","log","renderFolders","inboxLabel","name","icon","sentLabel","messagesUnread","trashLabel","spamLabel","folders","renderLabels","map","iconProps","color","backgroundColor","size","selected","render"],"mappings":"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","sourcesContent":["import React, { PureComponent } from \"react\";\r\n\r\nimport groupBy from \"lodash/groupBy\";\r\n\r\nimport sortBy from \"lodash/sortBy\";\r\nimport Menu from \"../menu/menu\";\r\nimport {\r\n  faInbox,\r\n  faEnvelope,\r\n  faTrash,\r\n  faCircle,\r\n  faExclamationCircle\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nimport LabelItem from \"./LabelItem\";\r\n\r\nimport \"./sidebar.scss\";\r\n\r\nexport class Sidebar extends PureComponent {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      selectedLabel: props.pathname\r\n    };\r\n\r\n    //this.renderLabels = this.renderLabels.bind(this);\r\n    this.navigateToList = this.navigateToList.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    //this.props.getLabelList(); //.then(labels => {});\r\n    /*  */\r\n    //this.props.getLabelMessages();\r\n  }\r\n\r\n  navigateToList(evt, labelId) {\r\n    const label = this.props.labelsResult.labels.find(el => el.id === labelId);\r\n    this.props.onLabelClick(label || { id: \"\" });\r\n  }\r\n\r\n  renderItems(labelList) {\r\n    if (labelList.length === 0) {\r\n      return <div />;\r\n    }\r\n\r\n    const labels = labelList.reduce((acc, el) => {\r\n      acc.push(el);\r\n      return acc;\r\n    }, []);\r\n\r\n    const labelGroups = groupBy(labels, \"type\");\r\n    console.log('==================', labelGroups);\r\n\r\n    // const visibleLabels = labelGroups.user.filter(\r\n    //   el =>\r\n    //     // el.labelListVisibility === \"labelShow\" ||\r\n    //     // el.labelListVisibility === \"labelShowIfUnread\" ||\r\n    //     !el.labelListVisibility || true\r\n    // );\r\n    // const sortedLabels = sortBy(visibleLabels, \"name\");\r\n    // // console.log(visibleLabels)\r\n    //\r\n    // return (\r\n    //   <React.Fragment>\r\n    //     {this.renderFolders(labelGroups.system)}\r\n    //     {this.renderLabels(sortedLabels)}\r\n    //   </React.Fragment>\r\n    // );\r\n  }\r\n\r\n  renderFolders(labels) {\r\n    const inboxLabel = {\r\n      ...labels.find(el => el.id === \"INBOX\"),\r\n      name: \"Inbox\",\r\n      icon: faInbox\r\n    };\r\n    const sentLabel = {\r\n      ...labels.find(el => el.id === \"SENT\"),\r\n      messagesUnread: 0,\r\n      name: \"Sent\",\r\n      icon: faEnvelope\r\n    };\r\n    const trashLabel = {\r\n      ...labels.find(el => el.id === \"TRASH\"),\r\n      messagesUnread: 0,\r\n      name: \"Trash\",\r\n      icon: faTrash\r\n    };\r\n    const spamLabel = {\r\n      ...labels.find(el => el.id === \"SPAM\"),\r\n      name: \"Spam\",\r\n      icon: faExclamationCircle\r\n    };\r\n\r\n    const folders = [inboxLabel, sentLabel, trashLabel, spamLabel];\r\n\r\n    // return (\r\n    //   // <React.Fragment>\r\n    //   //   <li key=\"olders-nav-title\" className=\"pl-2 nav-title\">\r\n    //   //     Folders\r\n    //   //   </li>\r\n    //   //   {folders.map(el => {\r\n    //   //     const iconProps = { icon: el.icon, size: \"lg\" };\r\n    //   //     return (\r\n    //   //       <LabelItem\r\n    //   //         key={el.id + \"_label\"}\r\n    //   //         onClick={this.navigateToList}\r\n    //   //         name={el.name}\r\n    //   //         id={el.id}\r\n    //   //         messagesUnread={el.messagesUnread}\r\n    //   //         iconProps={iconProps}\r\n    //   //         selected={el.selected}\r\n    //   //       />\r\n    //   //     );\r\n    //   //   })}\r\n    //   // </React.Fragment>\r\n    // );\r\n  }\r\n\r\n  renderLabels(labels) {\r\n    return (\r\n      <React.Fragment>\r\n        <li key=\"olders-nav-title\" className=\"pl-2 nav-title\">\r\n          Labels\r\n        </li>\r\n        {labels.map(el => {\r\n          const iconProps = {\r\n            icon: faCircle,\r\n            color: el.color ? el.color.backgroundColor : \"gainsboro\",\r\n            size: \"sm\"\r\n          };\r\n          return (\r\n            <LabelItem\r\n              key={el.id + \"_label\"}\r\n              onClick={this.navigateToList}\r\n              name={el.name}\r\n              id={el.id}\r\n              messagesUnread={el.messagesUnread}\r\n              iconProps={iconProps}\r\n              selected={el.selected}\r\n            />\r\n          );\r\n        })}\r\n      </React.Fragment>\r\n    );\r\n  }\r\n\r\n  render() {\r\n    return (\r\n\r\n      <div className=\"\">\r\n        <Menu />\r\n         {/* <div className=\"compose-panel\">\r\n          <div className=\"\">\r\n            <ComposeMessage\r\n              subject=\"\"\r\n              to=\"\"\r\n            >\r\n            \r\n              <button className=\"btn btn-dark align-self-center w-150 font-weight-bold\">\r\n                 Compose\r\n             </button>\r\n            </ComposeMessage>\r\n\r\n          </div> \r\n\r\n        </div> */}\r\n        {/* <Link to='/sent'>\r\n          <button\r\n              className=\"btn btn-red align-self-center w-150 font-weight-bold, gmailClass\">\r\n            Sent\r\n          </button>\r\n        </Link>\r\n        <Link to='/inbox'>\r\n          <button\r\n              className=\"btn btn-red align-self-center w-150 font-weight-bold, gmailClass\">\r\n            Inbox\r\n          </button>\r\n        </Link>\r\n        <Link to='/spam'>\r\n          <button\r\n              className=\"btn btn-red align-self-center w-150 font-weight-bold, gmailClass\">\r\n            Spam\r\n          </button>\r\n        </Link>\r\n\r\n        <Link to='/trash'>\r\n          <button\r\n              className=\"btn btn-red align-self-center w-150 font-weight-bold, gmailClass\">\r\n            Trash\r\n          </button>\r\n        </Link> */} */}\r\n\r\n        {/* <PerfectScrollbar\r\n          component=\"ul\"\r\n          className=\"d-flex flex-column border-0 m-0 sidebar\"\r\n        >\r\n          {this.renderItems(this.props.labelsResult.labels)}\r\n        </PerfectScrollbar> */}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Sidebar;\r\n"]},"metadata":{},"sourceType":"module"}