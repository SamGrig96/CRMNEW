{"ast":null,"code":"import{getMessageList}from\"../../../../api\";import{getMessage}from\"../../../../api\";import{batchModify}from\"../../../../api\";import{selectLabel}from\"../../../sidebar/sidebar.actions\";export var GET_MESSAGES=\"GET_MESSAGES\";export var GET_MESSAGES_LOAD_IN_PROGRESS=\"GET_MESSAGES_LOAD_IN_PROGRESS\";export var GET_MESSAGES_FAILED='GET_MESSAGES_FAILED';export var TOGGLE_SELECTED=\"TOGGLE_SELECTED\";export var MESSAGE_LOAD_IN_PROGRESS=\"MESSAGE_LOAD_IN_PROGRESS\";export var MESSAGE_LOAD_SUCCESS=\"MESSAGE_LOAD_SUCCESS\";export var MESSAGE_LOAD_FAIL=\"MESSAGE_LOAD_FAIL\";export var EMPTY_MESSAGES=\"EMPTY_MESSAGES\";export var SET_PAGE_TOKENS=\"SET_PAGE_TOKENS\";export var ADD_INITIAL_PAGE_TOKEN=\"ADD_INITIAL_PAGE_TOKEN\";export var CLEAR_PAGE_TOKENS=\"CLEAR_PAGE_TOKENS\";export var MODIFY_MESSAGES_SUCCESS=\"MODIFY_MESSAGES_SUCCESS\";export var MODIFY_MESSAGES_FAILED=\"MODIFY_MESSAGES_FAILED\";export var SET_SEARCH_QUERY=\"SET_SEARCH_QUERY\";export var getLabelMessages=function getLabelMessages(_ref){var labelIds=_ref.labelIds,_ref$q=_ref.q,q=_ref$q===void 0?\"\":_ref$q,pageToken=_ref.pageToken;return function(dispatch,getState){dispatch(setMessageListLoadInProgress());var state=getState();var searchQuery=state.searchQuery;if(searchQuery!==\"\"){dispatch(selectLabel(\"-1\"));}getMessageList({labelIds:labelIds,maxResults:20,q:searchQuery,pageToken:pageToken}).then(function(response){dispatch({type:GET_MESSAGES,payload:response});dispatch(setPageTokens({nextPageToken:response.nextPageToken||\"\"}));}).catch(function(err){dispatch({type:GET_MESSAGES_FAILED,payload:err});});};};export var setSearchQuery=function setSearchQuery(q){return{type:SET_SEARCH_QUERY,payload:q};};export var setPageTokens=function setPageTokens(tokens){return{type:SET_PAGE_TOKENS,payload:tokens};};export var emptyLabelMessages=function emptyLabelMessages(){return{type:EMPTY_MESSAGES};};export var toggleSelected=function toggleSelected(messageIds,selected){return{type:TOGGLE_SELECTED,payload:{messageIds:messageIds,selected:selected}};};export var getEmailMessage=function getEmailMessage(messageId){return function(dispatch){dispatch(setMessageLoadInProgress());getMessage(messageId).then(function(response){dispatch({type:MESSAGE_LOAD_SUCCESS,payload:response});}).catch(function(error){dispatch({type:MESSAGE_LOAD_FAIL,payload:error});});};};var setMessageLoadInProgress=function setMessageLoadInProgress(){return{type:MESSAGE_LOAD_IN_PROGRESS};};var setMessageListLoadInProgress=function setMessageListLoadInProgress(){return{type:GET_MESSAGES_LOAD_IN_PROGRESS};};export var addInitialPageToken=function addInitialPageToken(token){return{type:ADD_INITIAL_PAGE_TOKEN,payload:token};};export var clearPageTokens=function clearPageTokens(){return{type:CLEAR_PAGE_TOKENS};};export var modifyMessages=function modifyMessages(_ref2){var ids=_ref2.ids,_ref2$addLabelIds=_ref2.addLabelIds,addLabelIds=_ref2$addLabelIds===void 0?[]:_ref2$addLabelIds,_ref2$removeLabelIds=_ref2.removeLabelIds,removeLabelIds=_ref2$removeLabelIds===void 0?[]:_ref2$removeLabelIds;return function(dispatch){batchModify({ids:ids,addLabelIds:addLabelIds,removeLabelIds:removeLabelIds}).then(function(modifiedIds){dispatch({type:MODIFY_MESSAGES_SUCCESS,payload:{modifiedIds:modifiedIds,addLabelIds:addLabelIds,removeLabelIds:removeLabelIds}});}).catch(function(error){dispatch({type:MODIFY_MESSAGES_FAILED});});};};","map":{"version":3,"sources":["C:/Users/grigo/OneDrive/Рабочий стол/CRM/src/components/content/message-list/actions/message-list.actions.jsx"],"names":["getMessageList","getMessage","batchModify","selectLabel","GET_MESSAGES","GET_MESSAGES_LOAD_IN_PROGRESS","GET_MESSAGES_FAILED","TOGGLE_SELECTED","MESSAGE_LOAD_IN_PROGRESS","MESSAGE_LOAD_SUCCESS","MESSAGE_LOAD_FAIL","EMPTY_MESSAGES","SET_PAGE_TOKENS","ADD_INITIAL_PAGE_TOKEN","CLEAR_PAGE_TOKENS","MODIFY_MESSAGES_SUCCESS","MODIFY_MESSAGES_FAILED","SET_SEARCH_QUERY","getLabelMessages","labelIds","q","pageToken","dispatch","getState","setMessageListLoadInProgress","state","searchQuery","maxResults","then","response","type","payload","setPageTokens","nextPageToken","catch","err","setSearchQuery","tokens","emptyLabelMessages","toggleSelected","messageIds","selected","getEmailMessage","messageId","setMessageLoadInProgress","error","addInitialPageToken","token","clearPageTokens","modifyMessages","ids","addLabelIds","removeLabelIds","modifiedIds"],"mappings":"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","sourcesContent":["import { getMessageList } from \"../../../../api\";\r\nimport { getMessage } from \"../../../../api\";\r\nimport { batchModify } from \"../../../../api\";\r\nimport { selectLabel } from \"../../../sidebar/sidebar.actions\";\r\n\r\nexport const GET_MESSAGES = \"GET_MESSAGES\";\r\nexport const GET_MESSAGES_LOAD_IN_PROGRESS = \"GET_MESSAGES_LOAD_IN_PROGRESS\";\r\nexport const GET_MESSAGES_FAILED = 'GET_MESSAGES_FAILED';\r\nexport const TOGGLE_SELECTED = \"TOGGLE_SELECTED\";\r\nexport const MESSAGE_LOAD_IN_PROGRESS = \"MESSAGE_LOAD_IN_PROGRESS\";\r\nexport const MESSAGE_LOAD_SUCCESS = \"MESSAGE_LOAD_SUCCESS\";\r\nexport const MESSAGE_LOAD_FAIL = \"MESSAGE_LOAD_FAIL\";\r\nexport const EMPTY_MESSAGES = \"EMPTY_MESSAGES\";\r\nexport const SET_PAGE_TOKENS = \"SET_PAGE_TOKENS\";\r\nexport const ADD_INITIAL_PAGE_TOKEN = \"ADD_INITIAL_PAGE_TOKEN\";\r\nexport const CLEAR_PAGE_TOKENS = \"CLEAR_PAGE_TOKENS\";\r\nexport const MODIFY_MESSAGES_SUCCESS = \"MODIFY_MESSAGES_SUCCESS\";\r\nexport const MODIFY_MESSAGES_FAILED = \"MODIFY_MESSAGES_FAILED\";\r\nexport const SET_SEARCH_QUERY = \"SET_SEARCH_QUERY\";\r\n\r\nexport const getLabelMessages = ({\r\n  labelIds,\r\n  q = \"\",\r\n  pageToken\r\n}) => (dispatch, getState) => {\r\n  dispatch(setMessageListLoadInProgress());\r\n\r\n  const state = getState();\r\n  const {searchQuery} = state;\r\n\r\n  if (searchQuery !== \"\") {\r\n    dispatch(selectLabel(\"-1\"));\r\n  }\r\n\r\n  getMessageList({ labelIds, maxResults: 20, q: searchQuery, pageToken }).then(response => {\r\n    dispatch({\r\n      type: GET_MESSAGES,\r\n      payload: response\r\n    });\r\n\r\n    dispatch(setPageTokens({\r\n      nextPageToken: response.nextPageToken || \"\"\r\n    }));\r\n    \r\n  }).catch(err => {\r\n    dispatch({\r\n      type: GET_MESSAGES_FAILED,\r\n      payload: err\r\n    })\r\n  });\r\n};\r\n\r\nexport const setSearchQuery = q => ({\r\n  type: SET_SEARCH_QUERY,\r\n  payload: q\r\n})\r\n\r\nexport const setPageTokens = tokens => ({\r\n  type: SET_PAGE_TOKENS,\r\n  payload: tokens\r\n});\r\n\r\nexport const emptyLabelMessages = () => ({\r\n  type: EMPTY_MESSAGES\r\n});\r\n\r\nexport const toggleSelected = (messageIds, selected) => ({\r\n  type: TOGGLE_SELECTED,\r\n  payload: {\r\n    messageIds,\r\n    selected\r\n  }\r\n});\r\n\r\nexport const getEmailMessage = messageId => dispatch => {\r\n  dispatch(setMessageLoadInProgress());\r\n  getMessage(messageId)\r\n    .then(response => {\r\n      dispatch({\r\n        type: MESSAGE_LOAD_SUCCESS,\r\n        payload: response\r\n      });\r\n    })\r\n    .catch(error => {\r\n      dispatch({\r\n        type: MESSAGE_LOAD_FAIL,\r\n        payload: error\r\n      });\r\n    });\r\n};\r\n\r\nconst setMessageLoadInProgress = () => ({\r\n  type: MESSAGE_LOAD_IN_PROGRESS\r\n});\r\n\r\nconst setMessageListLoadInProgress = () => ({\r\n  type: GET_MESSAGES_LOAD_IN_PROGRESS\r\n});\r\n\r\nexport const addInitialPageToken = token => ({\r\n  type: ADD_INITIAL_PAGE_TOKEN,\r\n  payload: token\r\n})\r\n\r\nexport const clearPageTokens = () => ({\r\n  type: CLEAR_PAGE_TOKENS\r\n})\r\n\r\nexport const modifyMessages = ({ids, addLabelIds = [], removeLabelIds = []}) => dispatch => {\r\n  batchModify({ids, addLabelIds, removeLabelIds})\r\n    .then(modifiedIds => {\r\n      dispatch({\r\n       type: MODIFY_MESSAGES_SUCCESS,\r\n       payload: {modifiedIds, addLabelIds, removeLabelIds}\r\n      })\r\n    })\r\n    .catch(error => {\r\n      dispatch({\r\n       type: MODIFY_MESSAGES_FAILED\r\n      })\r\n    })\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}