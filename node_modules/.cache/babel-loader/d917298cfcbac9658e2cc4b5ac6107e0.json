{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\grigo\\\\OneDrive\\\\\\u0420\\u0430\\u0431\\u043E\\u0447\\u0438\\u0439 \\u0441\\u0442\\u043E\\u043B\\\\CRM\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport { MAX_RESULTS } from \"../constants\";\nimport { getBody, isHTML } from './utils';\n\nconst getLabelDetailPromise = async labelId => {\n  return await window.gapi.client.gmail.users.labels.get({\n    userId: \"me\",\n    id: labelId\n  });\n};\n\nconst getLabelDetails = async labelList => {\n  const labelPromises = labelList.result.labels.map(async el => {\n    return await getLabelDetailPromise(el.id);\n  });\n  return Promise.all(labelPromises);\n};\n\nexport const getLabelList = async () => {\n  // console.log('hello', getLabelList);\n  const labelIds = await window.gapi.client.gmail.users.labels.list({\n    userId: \"me\"\n  });\n  const labelDetails = await getLabelDetails(labelIds);\n  return labelDetails.map(el => el.result);\n};\nexport const getMessageList = async ({\n  labelIds,\n  maxResults,\n  q,\n  pageToken\n}) => {\n  const rawList = await getMessageRawList({\n    labelIds,\n    maxResults,\n    pageToken,\n    q\n  });\n  const messageHeaders = await getMessageHeaders(rawList);\n  const flattenedMessages = await flattenMessagesWithLabel(messageHeaders.messages, labelIds);\n  return _objectSpread({}, messageHeaders, {\n    messages: flattenedMessages.messages,\n    label: flattenedMessages.label\n  });\n};\nexport const flattenMessagesWithLabel = async (messages, labelIds) => {\n  if (!labelIds) {\n    return {\n      messages,\n      label: {\n        result: {\n          messagesTotal: 0\n        }\n      }\n    };\n  }\n\n  const labels = await window.gapi.client.gmail.users.labels.get({\n    userId: \"me\",\n    id: labelIds[0]\n  });\n  return {\n    messages,\n    label: labels\n  };\n};\n\nconst getMessageRawList = async ({\n  labelIds,\n  maxResults,\n  pageToken,\n  q = \"\"\n}) => {\n  return await window.gapi.client.gmail.users.messages.list(_objectSpread({\n    userId: \"me\",\n    q,\n    maxResults: maxResults || MAX_RESULTS\n  }, labelIds && {\n    labelIds\n  }, {}, pageToken && {\n    pageToken\n  }));\n};\n\nconst getMessageHeaders = async messageRawList => {\n  const messageResult = messageRawList.result;\n  const headerPromises = (messageResult.messages || []).map(async el => {\n    return await getMessageHeader(el.id);\n  });\n  const messages = await Promise.all(headerPromises);\n  return _objectSpread({}, messageResult, {\n    messages\n  });\n};\n\nconst getMessageHeader = async id => {\n  const messages = await window.gapi.client.gmail.users.messages.get({\n    userId: \"me\",\n    id: id,\n    format: \"metadata\",\n    metadataHeaders: [\"Delivered-To\", \"X-Received\", \"To\", \"Message-ID\", \"Date\", \"Content-Type\", \"MIME-Version\", \"Reply-To\", \"From\", \"Subject\", \"Return-Path\" // See https://www.iana.org/assignments/message-headers/message-headers.xhtml\n    // for more headers\n    ]\n  });\n  return messages.result;\n};\n\nexport const getMessage = async messageId => {\n  const response = await window.gapi.client.gmail.users.messages.get({\n    userId: \"me\",\n    id: messageId,\n    format: \"full\"\n  });\n  const result = response.result;\n  let body = getBody(result.payload, \"text/html\");\n\n  if (body === \"\") {\n    body = getBody(result.payload, \"text/plain\");\n    body = body.replace(/(\\r\\n)+/g, '<br data-break=\"rn-1\">').replace(/[\\n\\r]+/g, '<br data-break=\"nr\">');\n  }\n\n  if (body !== \"\" && !isHTML(body)) {\n    body = body.replace(/(\\r\\n)+/g, '<div data-break=\"rn-1\" style=\"margin-bottom:10px\"></div>').replace(/[\\n\\r]+/g, '<br data-break=\"nr\">');\n  }\n\n  return {\n    body,\n    headers: response.headers,\n    result: _objectSpread({}, result, {\n      messageHeaders: response.result.payload.headers,\n      payload: undefined\n    })\n  };\n};\nexport const sendMessage = ({\n  headers,\n  body\n}) => {\n  let email = \"\";\n\n  const headersClone = _objectSpread({}, headers);\n\n  headersClone[\"Content-Type\"] = \"text/html; charset='UTF-8'\";\n  headersClone[\"Content-Transfer-Encoding\"] = \"base64\";\n\n  for (let header in headersClone) {\n    email += `${header}: ${headersClone[header]}\\r\\n`;\n  }\n\n  email += `\\r\\n<html><body>${body}</body></html>`;\n  const encodedEmail = unescape(encodeURIComponent(email));\n  return window.gapi.client.gmail.users.messages.send({\n    userId: \"me\",\n    resource: {\n      raw: window.btoa(encodedEmail).replace(/\\+/g, \"-\").replace(/\\//g, \"_\")\n    }\n  });\n};\nexport const batchModify = async ({\n  ids,\n  addLabelIds = [],\n  removeLabelIds = []\n}) => {\n  const batchModifyResult = await window.gapi.client.gmail.users.messages.batchModify({\n    userId: \"me\",\n    ids,\n    addLabelIds,\n    removeLabelIds\n  });\n  return ids;\n};","map":{"version":3,"sources":["C:/Users/grigo/OneDrive/Рабочий стол/CRM/src/api/index.jsx"],"names":["MAX_RESULTS","getBody","isHTML","getLabelDetailPromise","labelId","window","gapi","client","gmail","users","labels","get","userId","id","getLabelDetails","labelList","labelPromises","result","map","el","Promise","all","getLabelList","labelIds","list","labelDetails","getMessageList","maxResults","q","pageToken","rawList","getMessageRawList","messageHeaders","getMessageHeaders","flattenedMessages","flattenMessagesWithLabel","messages","label","messagesTotal","messageRawList","messageResult","headerPromises","getMessageHeader","format","metadataHeaders","getMessage","messageId","response","body","payload","replace","headers","undefined","sendMessage","email","headersClone","header","encodedEmail","unescape","encodeURIComponent","send","resource","raw","btoa","batchModify","ids","addLabelIds","removeLabelIds","batchModifyResult"],"mappings":"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","sourcesContent":["import { MAX_RESULTS } from \"../constants\";\r\nimport {getBody, isHTML} from './utils';\r\n\r\nconst getLabelDetailPromise = async (labelId) => {\r\n  return await window.gapi.client.gmail.users.labels.get({\r\n      userId: \"me\",\r\n      id: labelId\r\n    });\r\n};\r\n\r\nconst getLabelDetails = async (labelList) => {\r\n  const labelPromises = labelList.result.labels.map(async (el) => {\r\n    return await getLabelDetailPromise(el.id);\r\n  });\r\n\r\n  return Promise.all(labelPromises);\r\n};\r\n\r\nexport const getLabelList = async () => {\r\n  // console.log('hello', getLabelList);\r\n  const labelIds = await window.gapi.client.gmail.users.labels.list({userId: \"me\"});\r\n  const labelDetails = await getLabelDetails(labelIds);\r\n  return labelDetails.map(el => el.result);\r\n}\r\n\r\nexport const getMessageList = async ({ labelIds, maxResults, q, pageToken }) => {\r\n  const rawList = await getMessageRawList({ labelIds, maxResults, pageToken, q });\r\n  const messageHeaders = await getMessageHeaders(rawList);\r\n  const flattenedMessages = await flattenMessagesWithLabel(messageHeaders.messages, labelIds);\r\n  return {\r\n    ...messageHeaders,\r\n    messages: flattenedMessages.messages,\r\n    label: flattenedMessages.label\r\n  };\r\n}\r\n\r\nexport const flattenMessagesWithLabel = async (messages, labelIds) => {\r\n  if (!labelIds) {\r\n    return {\r\n      messages,\r\n      label: {\r\n        result: {\r\n          messagesTotal: 0\r\n        }\r\n      }\r\n    };\r\n  }\r\n\r\n  const labels = await window.gapi.client.gmail.users.labels.get({userId: \"me\", id: labelIds[0]});\r\n  \r\n  return {\r\n    messages,\r\n    label: labels\r\n  };\r\n}\r\n\r\nconst getMessageRawList = async ({ labelIds, maxResults, pageToken, q = \"\" }) => {\r\n  return await window.gapi.client.gmail.users.messages\r\n    .list({\r\n      userId: \"me\",\r\n      q,\r\n      maxResults: maxResults || MAX_RESULTS,\r\n      ...(labelIds && {labelIds}),\r\n      ...(pageToken && { pageToken })\r\n    });\r\n}\r\n \r\nconst getMessageHeaders = async (messageRawList) => {\r\n  const messageResult = messageRawList.result;\r\n\r\n  const headerPromises = (messageResult.messages || []).map(async (el) => {\r\n    return await getMessageHeader(el.id);\r\n  });\r\n\r\n  const messages = await Promise.all(headerPromises);\r\n\r\n  return {\r\n    ...messageResult,\r\n    messages\r\n  };  \r\n};\r\n\r\nconst getMessageHeader = async (id) => {\r\n    const messages = await window.gapi.client.gmail.users.messages\r\n      .get({\r\n        userId: \"me\",\r\n        id: id,\r\n        format: \"metadata\",\r\n        metadataHeaders: [\r\n          \"Delivered-To\",\r\n          \"X-Received\",\r\n          \"To\",\r\n          \"Message-ID\",\r\n          \"Date\",\r\n          \"Content-Type\",\r\n          \"MIME-Version\",\r\n          \"Reply-To\",\r\n          \"From\",\r\n          \"Subject\",\r\n          \"Return-Path\",\r\n          // See https://www.iana.org/assignments/message-headers/message-headers.xhtml\r\n          // for more headers\r\n        ]\r\n      });\r\n      return messages.result;\r\n};\r\n\r\nexport const getMessage = async(messageId) => {  \r\n  const response = await window.gapi.client.gmail.users.messages\r\n  .get({\r\n    userId: \"me\",\r\n    id: messageId,\r\n    format: \"full\"\r\n  });\r\n\r\n  const { result } = response;\r\n\r\n  let body = getBody(result.payload, \"text/html\");        \r\n\r\n  if (body === \"\") {\r\n    body = getBody(result.payload, \"text/plain\");\r\n    body = body.replace(/(\\r\\n)+/g, '<br data-break=\"rn-1\">').replace(/[\\n\\r]+/g, '<br data-break=\"nr\">');\r\n  }\r\n\r\n  if (body !== \"\" && !isHTML(body)) {\r\n    body = body.replace(/(\\r\\n)+/g, '<div data-break=\"rn-1\" style=\"margin-bottom:10px\"></div>').replace(/[\\n\\r]+/g, '<br data-break=\"nr\">');\r\n  }\r\n    \r\n  return {\r\n    body,\r\n    headers: response.headers,\r\n    result: { ...result, messageHeaders: response.result.payload.headers, payload: undefined }\r\n  };\r\n};\r\n\r\nexport const sendMessage = ({ headers, body }) => {\r\n  let email = \"\";\r\n\r\n  const headersClone = { ...headers };\r\n  headersClone[\"Content-Type\"] = \"text/html; charset='UTF-8'\";\r\n  headersClone[\"Content-Transfer-Encoding\"] = \"base64\";\r\n\r\n  for (let header in headersClone) {\r\n    email += `${header}: ${headersClone[header]}\\r\\n`;\r\n  }\r\n\r\n  email += `\\r\\n<html><body>${body}</body></html>`;\r\n  const encodedEmail = unescape(encodeURIComponent(email));\r\n\r\n  return window.gapi.client.gmail.users.messages.send({\r\n    userId: \"me\",\r\n    resource: {\r\n      raw: window.btoa(encodedEmail).replace(/\\+/g, \"-\").replace(/\\//g, \"_\")\r\n    }\r\n  });\r\n};\r\n\r\nexport const batchModify = async ({ids, addLabelIds = [], removeLabelIds = []}) => {\r\n  const batchModifyResult = await window.gapi.client.gmail.users.messages\r\n    .batchModify({\r\n      userId: \"me\",\r\n      ids,\r\n      addLabelIds,\r\n      removeLabelIds\r\n    });\r\n\r\n    return ids;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}