{"ast":null,"code":"export const signIn = () => {\n  return window.gapi.auth2.getAuthInstance().signIn();\n};\nexport const myGapi = () => {\n  let myGapi = JSON.stringify(window.gapi);\n};\nmyGapi();\nexport const initGmailClient = (apiKey, clientId) => {\n  const API_KEY = process.env.REACT_APP_API_KEY;\n  const CLIENT_ID = process.env.REACT_APP_CLIENT_ID; // Array of API discovery doc URLs for APIs\n\n  const DISCOVERY_DOCS = [\"https://www.googleapis.com/discovery/v1/apis/gmail/v1/rest\"]; // Authorization scopes required by the API; multiple scopes can be\n  // included, separated by spaces.\n  // More info: https://developers.google.com/identity/protocols/googlescopes\n\n  const SCOPES = \"https://mail.google.com/\"; // Scope for Read, send, delete, and manage your email\n\n  let gapi = window.gapi;\n  return gapi.client.init({\n    apiKey: API_KEY,\n    clientId: CLIENT_ID,\n    discoveryDocs: DISCOVERY_DOCS,\n    scope: SCOPES\n  });\n};\nexport const checkSignInStatus = () => {\n  return new Promise((resolve, reject) => {\n    initGmailClient().then(_ => {\n      let gapi = window.gapi;\n      console.log(gapi, \"gapi1\");\n      const googleAuthInstance = gapi.auth2.getAuthInstance();\n      const isSignedIn = googleAuthInstance.isSignedIn.get();\n\n      if (isSignedIn) {\n        // Listen for sign-in state changes.\n        googleAuthInstance.isSignedIn.listen(isSignedIn => {\n          updateSigninStatus(isSignedIn);\n        });\n        console.log(\"AUTH_SUCCESS from checkSignInStatus\");\n        resolve(googleAuthInstance.currentUser.Ab);\n      } else {\n        reject();\n      }\n    }).catch(error => {\n      reject(error);\n    });\n  });\n}; // Listener for sign-in state\n\nexport const updateSigninStatus = isSignedIn => {\n  if (!isSignedIn) {// TODO: react to logged out status\n  }\n};\nexport const signOut = () => {\n  return window.gapi.auth2.getAuthInstance().signOut();\n};","map":{"version":3,"sources":["C:/Users/grigo/OneDrive/Рабочий стол/CRM/src/api/authentication.jsx"],"names":["signIn","window","gapi","auth2","getAuthInstance","myGapi","JSON","stringify","initGmailClient","apiKey","clientId","API_KEY","process","env","REACT_APP_API_KEY","CLIENT_ID","REACT_APP_CLIENT_ID","DISCOVERY_DOCS","SCOPES","client","init","discoveryDocs","scope","checkSignInStatus","Promise","resolve","reject","then","_","console","log","googleAuthInstance","isSignedIn","get","listen","updateSigninStatus","currentUser","Ab","catch","error","signOut"],"mappings":"AAAA,OAAO,MAAMA,MAAM,GAAG,MAAM;AAC1B,SAAOC,MAAM,CAACC,IAAP,CAAYC,KAAZ,CACJC,eADI,GAEJJ,MAFI,EAAP;AAID,CALM;AAOP,OAAO,MAAMK,MAAM,GAAC,MAAI;AACtB,MAAIA,MAAM,GAACC,IAAI,CAACC,SAAL,CAAeN,MAAM,CAACC,IAAtB,CAAX;AAED,CAHM;AAKPG,MAAM;AAEN,OAAO,MAAMG,eAAe,GAAG,CAACC,MAAD,EAASC,QAAT,KAAsB;AACnD,QAAMC,OAAO,GAAGC,OAAO,CAACC,GAAR,CAAYC,iBAA5B;AACA,QAAMC,SAAS,GAAGH,OAAO,CAACC,GAAR,CAAYG,mBAA9B,CAFmD,CAInD;;AACA,QAAMC,cAAc,GAAG,CACrB,4DADqB,CAAvB,CALmD,CASnD;AACA;AACA;;AACA,QAAMC,MAAM,GAAG,0BAAf,CAZmD,CAYR;;AAE3C,MAAIhB,IAAI,GAAGD,MAAM,CAACC,IAAlB;AAEA,SAAOA,IAAI,CAACiB,MAAL,CAAYC,IAAZ,CAAiB;AACtBX,IAAAA,MAAM,EAAEE,OADc;AAEtBD,IAAAA,QAAQ,EAAEK,SAFY;AAGtBM,IAAAA,aAAa,EAAEJ,cAHO;AAItBK,IAAAA,KAAK,EAAEJ;AAJe,GAAjB,CAAP;AAMD,CAtBM;AAwBP,OAAO,MAAMK,iBAAiB,GAAG,MAAM;AAErC,SAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtClB,IAAAA,eAAe,GAAGmB,IAAlB,CAAuBC,CAAC,IAAG;AACzB,UAAI1B,IAAI,GAAGD,MAAM,CAACC,IAAlB;AACA2B,MAAAA,OAAO,CAACC,GAAR,CAAY5B,IAAZ,EAAiB,OAAjB;AAEA,YAAM6B,kBAAkB,GAAG7B,IAAI,CAACC,KAAL,CAAWC,eAAX,EAA3B;AAEA,YAAM4B,UAAU,GAAGD,kBAAkB,CAACC,UAAnB,CAA8BC,GAA9B,EAAnB;;AAEA,UAAID,UAAJ,EAAgB;AACd;AACAD,QAAAA,kBAAkB,CAACC,UAAnB,CAA8BE,MAA9B,CAAqCF,UAAU,IAAI;AACjDG,UAAAA,kBAAkB,CAACH,UAAD,CAAlB;AACD,SAFD;AAIAH,QAAAA,OAAO,CAACC,GAAR,CAAY,qCAAZ;AAEAL,QAAAA,OAAO,CAACM,kBAAkB,CAACK,WAAnB,CAA+BC,EAAhC,CAAP;AAED,OAVD,MAUO;AACLX,QAAAA,MAAM;AACP;AACF,KArBD,EAsBGY,KAtBH,CAsBSC,KAAK,IAAI;AACdb,MAAAA,MAAM,CAACa,KAAD,CAAN;AACD,KAxBH;AA2BD,GA5BM,CAAP;AAgCD,CAlCM,C,CAoCP;;AACA,OAAO,MAAMJ,kBAAkB,GAAIH,UAAD,IAAgB;AAChD,MAAI,CAACA,UAAL,EAAiB,CACf;AACD;AACF,CAJM;AAMP,OAAO,MAAMQ,OAAO,GAAG,MAAM;AAC3B,SAAOvC,MAAM,CAACC,IAAP,CAAYC,KAAZ,CACJC,eADI,GAEJoC,OAFI,EAAP;AAGD,CAJM","sourcesContent":["export const signIn = () => {\r\n  return window.gapi.auth2\r\n    .getAuthInstance()\r\n    .signIn()\r\n    \r\n}\r\n\r\nexport const myGapi=()=>{\r\n  let myGapi=JSON.stringify(window.gapi)\r\n\r\n}\r\n\r\nmyGapi()\r\n\r\nexport const initGmailClient = (apiKey, clientId) => {\r\n  const API_KEY = process.env.REACT_APP_API_KEY;\r\n  const CLIENT_ID = process.env.REACT_APP_CLIENT_ID;\r\n\r\n  // Array of API discovery doc URLs for APIs\r\n  const DISCOVERY_DOCS = [\r\n    \"https://www.googleapis.com/discovery/v1/apis/gmail/v1/rest\"\r\n  ];\r\n\r\n  // Authorization scopes required by the API; multiple scopes can be\r\n  // included, separated by spaces.\r\n  // More info: https://developers.google.com/identity/protocols/googlescopes\r\n  const SCOPES = \"https://mail.google.com/\"; // Scope for Read, send, delete, and manage your email\r\n\r\n  let gapi = window.gapi;\r\n\r\n  return gapi.client.init({\r\n    apiKey: API_KEY,\r\n    clientId: CLIENT_ID,\r\n    discoveryDocs: DISCOVERY_DOCS,\r\n    scope: SCOPES\r\n  });\r\n};\r\n\r\nexport const checkSignInStatus = () => {  \r\n\r\n  return new Promise((resolve, reject) => {\r\n    initGmailClient().then(_=> {\r\n      let gapi = window.gapi;\r\n      console.log(gapi,\"gapi1\")\r\n      \r\n      const googleAuthInstance = gapi.auth2.getAuthInstance();\r\n      \r\n      const isSignedIn = googleAuthInstance.isSignedIn.get();\r\n\r\n      if (isSignedIn) {\r\n        // Listen for sign-in state changes.\r\n        googleAuthInstance.isSignedIn.listen(isSignedIn => {\r\n          updateSigninStatus(isSignedIn);\r\n        });\r\n        \r\n        console.log(\"AUTH_SUCCESS from checkSignInStatus\");\r\n\r\n        resolve(googleAuthInstance.currentUser.Ab);\r\n\r\n      } else {\r\n        reject();\r\n      }\r\n    })\r\n      .catch(error => {\r\n        reject(error);\r\n      });\r\n  \r\n  \r\n  })\r\n\r\n\r\n \r\n};\r\n\r\n// Listener for sign-in state\r\nexport const updateSigninStatus = (isSignedIn) => {\r\n  if (!isSignedIn) {\r\n    // TODO: react to logged out status\r\n  }\r\n};\r\n\r\nexport const signOut = () => {\r\n  return window.gapi.auth2\r\n    .getAuthInstance()\r\n    .signOut()\r\n};"]},"metadata":{},"sourceType":"module"}