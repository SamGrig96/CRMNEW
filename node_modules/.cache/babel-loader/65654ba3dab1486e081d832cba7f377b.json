{"ast":null,"code":"import { isNullOrUndefined } from '@syncfusion/ej2-base';\nimport { Internationalization } from '@syncfusion/ej2-base'; // import { IValueFormatter } from '../base/interface';\n\n/**\n * ValueFormatter class to globalize the value.\n * @private\n */\n\nvar ValueFormatter =\n/** @class */\nfunction () {\n  function ValueFormatter(cultureName) {\n    this.intl = new Internationalization(); // if (!isNullOrUndefined(cultureName)) {\n    //     this.intl.culture = cultureName;\n    // }\n  }\n\n  ValueFormatter.prototype.getFormatFunction = function (format) {\n    if (format.type) {\n      return this.intl.getDateFormat(format);\n    } else {\n      return this.intl.getNumberFormat(format);\n    }\n  }; // public getParserFunction(format: NumberFormatOptions | DateFormatOptions): Function {\n  //     if ((<DateFormatOptions>format).type) {\n  //         return this.intl.getDateParser(<DateFormatOptions>format);\n  //     } else {\n  //         return this.intl.getNumberParser(<DateFormatOptions>format);\n  //     }\n  // }\n  // public fromView(value: string, format: Function, type?: string): string | number | Date {\n  //     if (type === 'date' || type === 'datetime' || type === 'number') {\n  //         return format(value);\n  //     } else {\n  //         return value;\n  //     }\n  // }\n\n\n  ValueFormatter.prototype.toView = function (value, format) {\n    var result = value;\n\n    if (!isNullOrUndefined(format) && !isNullOrUndefined(value)) {\n      result = format(value);\n    }\n\n    return result;\n  }; // public setCulture(cultureName: string): void {\n  //     if (!isNullOrUndefined(cultureName)) {\n  //         setCulture(cultureName);\n  //     }\n  // }\n\n  /* tslint:disable:no-any */\n\n\n  ValueFormatter.prototype.displayText = function (value, format) {\n    return this.toView(value, this.getFormatFunction(format));\n  };\n\n  return ValueFormatter;\n}();\n\nexport { ValueFormatter };","map":{"version":3,"sources":["C:/Users/grigo/OneDrive/Рабочий стол/CRM/node_modules/@syncfusion/ej2-excel-export/src/value-formatter.js"],"names":["isNullOrUndefined","Internationalization","ValueFormatter","cultureName","intl","prototype","getFormatFunction","format","type","getDateFormat","getNumberFormat","toView","value","result","displayText"],"mappings":"AAAA,SAASA,iBAAT,QAAkC,sBAAlC;AACA,SAASC,oBAAT,QAAqC,sBAArC,C,CACA;;AACA;;;;;AAIA,IAAIC,cAAc;AAAG;AAAe,YAAY;AAC5C,WAASA,cAAT,CAAwBC,WAAxB,EAAqC;AACjC,SAAKC,IAAL,GAAY,IAAIH,oBAAJ,EAAZ,CADiC,CAEjC;AACA;AACA;AACH;;AACDC,EAAAA,cAAc,CAACG,SAAf,CAAyBC,iBAAzB,GAA6C,UAAUC,MAAV,EAAkB;AAC3D,QAAIA,MAAM,CAACC,IAAX,EAAiB;AACb,aAAO,KAAKJ,IAAL,CAAUK,aAAV,CAAwBF,MAAxB,CAAP;AACH,KAFD,MAGK;AACD,aAAO,KAAKH,IAAL,CAAUM,eAAV,CAA0BH,MAA1B,CAAP;AACH;AACJ,GAPD,CAP4C,CAe5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAL,EAAAA,cAAc,CAACG,SAAf,CAAyBM,MAAzB,GAAkC,UAAUC,KAAV,EAAiBL,MAAjB,EAAyB;AACvD,QAAIM,MAAM,GAAGD,KAAb;;AACA,QAAI,CAACZ,iBAAiB,CAACO,MAAD,CAAlB,IAA8B,CAACP,iBAAiB,CAACY,KAAD,CAApD,EAA6D;AACzDC,MAAAA,MAAM,GAAGN,MAAM,CAACK,KAAD,CAAf;AACH;;AACD,WAAOC,MAAP;AACH,GAND,CA7B4C,CAoC5C;AACA;AACA;AACA;AACA;;AACA;;;AACAX,EAAAA,cAAc,CAACG,SAAf,CAAyBS,WAAzB,GAAuC,UAAUF,KAAV,EAAiBL,MAAjB,EAAyB;AAC5D,WAAO,KAAKI,MAAL,CAAYC,KAAZ,EAAmB,KAAKN,iBAAL,CAAuBC,MAAvB,CAAnB,CAAP;AACH,GAFD;;AAGA,SAAOL,cAAP;AACH,CA9CmC,EAApC;;AA+CA,SAASA,cAAT","sourcesContent":["import { isNullOrUndefined } from '@syncfusion/ej2-base';\nimport { Internationalization } from '@syncfusion/ej2-base';\n// import { IValueFormatter } from '../base/interface';\n/**\n * ValueFormatter class to globalize the value.\n * @private\n */\nvar ValueFormatter = /** @class */ (function () {\n    function ValueFormatter(cultureName) {\n        this.intl = new Internationalization();\n        // if (!isNullOrUndefined(cultureName)) {\n        //     this.intl.culture = cultureName;\n        // }\n    }\n    ValueFormatter.prototype.getFormatFunction = function (format) {\n        if (format.type) {\n            return this.intl.getDateFormat(format);\n        }\n        else {\n            return this.intl.getNumberFormat(format);\n        }\n    };\n    // public getParserFunction(format: NumberFormatOptions | DateFormatOptions): Function {\n    //     if ((<DateFormatOptions>format).type) {\n    //         return this.intl.getDateParser(<DateFormatOptions>format);\n    //     } else {\n    //         return this.intl.getNumberParser(<DateFormatOptions>format);\n    //     }\n    // }\n    // public fromView(value: string, format: Function, type?: string): string | number | Date {\n    //     if (type === 'date' || type === 'datetime' || type === 'number') {\n    //         return format(value);\n    //     } else {\n    //         return value;\n    //     }\n    // }\n    ValueFormatter.prototype.toView = function (value, format) {\n        var result = value;\n        if (!isNullOrUndefined(format) && !isNullOrUndefined(value)) {\n            result = format(value);\n        }\n        return result;\n    };\n    // public setCulture(cultureName: string): void {\n    //     if (!isNullOrUndefined(cultureName)) {\n    //         setCulture(cultureName);\n    //     }\n    // }\n    /* tslint:disable:no-any */\n    ValueFormatter.prototype.displayText = function (value, format) {\n        return this.toView(value, this.getFormatFunction(format));\n    };\n    return ValueFormatter;\n}());\nexport { ValueFormatter };\n"]},"metadata":{},"sourceType":"module"}