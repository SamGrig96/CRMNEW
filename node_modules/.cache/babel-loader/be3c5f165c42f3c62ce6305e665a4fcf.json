{"ast":null,"code":"/**\n * IncrementalSearch module file\n */\nvar queryString = '';\nvar prevString = '';\nvar matches = [];\nvar activeClass = 'e-active';\n/**\n * Search and focus the list item based on key code matches with list text content\n * @param  { number } keyCode - Specifies the key code which pressed on keyboard events.\n * @param  { HTMLElement[]] } items - Specifies an array of HTMLElement, from which matches find has done.\n * @param { number } selectedIndex - Specifies the selected item in list item, so that search will happen\n * after selected item otherwise it will do from initial.\n * @param  { boolean } ignoreCase - Specifies the case consideration when search has done.\n */\n\nexport function incrementalSearch(keyCode, items, selectedIndex, ignoreCase) {\n  queryString += String.fromCharCode(keyCode);\n  setTimeout(function () {\n    queryString = '';\n  }, 1000);\n  var index;\n  queryString = ignoreCase ? queryString.toLowerCase() : queryString;\n\n  if (prevString === queryString) {\n    for (var i = 0; i < matches.length; i++) {\n      if (matches[i].classList.contains(activeClass)) {\n        index = i;\n        break;\n      }\n    }\n\n    index = index + 1;\n    return matches[index];\n  } else {\n    var listItems = items;\n    var strLength = queryString.length;\n    var text = void 0;\n    var item = void 0;\n    selectedIndex = selectedIndex ? selectedIndex + 1 : 0;\n    var i = selectedIndex;\n    matches = [];\n\n    do {\n      if (i === listItems.length) {\n        i = -1;\n      }\n\n      i === -1 ? index = 0 : index = i;\n      item = listItems[index];\n      text = ignoreCase ? item.innerText.toLowerCase() : item.innerText;\n\n      if (text.substr(0, strLength) === queryString) {\n        matches.push(listItems[index]);\n      }\n\n      i++;\n    } while (i !== selectedIndex);\n\n    prevString = queryString;\n    return matches[0];\n  }\n}\nexport function Search(inputVal, items, searchType, ignoreCase) {\n  var listItems = items;\n  ignoreCase = ignoreCase !== undefined && ignoreCase !== null ? ignoreCase : true;\n  var itemData = {\n    item: null,\n    index: null\n  };\n\n  if (inputVal && inputVal.length) {\n    var strLength = inputVal.length;\n    var queryStr = ignoreCase ? inputVal.toLocaleLowerCase() : inputVal;\n\n    for (var i = 0, itemsData = listItems; i < itemsData.length; i++) {\n      var item = itemsData[i];\n      var text = (ignoreCase ? item.textContent.toLocaleLowerCase() : item.textContent).replace(/^\\s+|\\s+$/g, '');\n\n      if (searchType === 'Equal' && text === queryStr || searchType === 'StartsWith' && text.substr(0, strLength) === queryStr) {\n        itemData.item = item;\n        itemData.index = i;\n        return {\n          item: item,\n          index: i\n        };\n      }\n    }\n\n    return itemData;\n  }\n\n  return itemData;\n}","map":{"version":3,"sources":["C:/Users/grigo/OneDrive/Рабочий стол/CRM/node_modules/@syncfusion/ej2-dropdowns/src/common/incremental-search.js"],"names":["queryString","prevString","matches","activeClass","incrementalSearch","keyCode","items","selectedIndex","ignoreCase","String","fromCharCode","setTimeout","index","toLowerCase","i","length","classList","contains","listItems","strLength","text","item","innerText","substr","push","Search","inputVal","searchType","undefined","itemData","queryStr","toLocaleLowerCase","itemsData","textContent","replace"],"mappings":"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","sourcesContent":["/**\n * IncrementalSearch module file\n */\nvar queryString = '';\nvar prevString = '';\nvar matches = [];\nvar activeClass = 'e-active';\n/**\n * Search and focus the list item based on key code matches with list text content\n * @param  { number } keyCode - Specifies the key code which pressed on keyboard events.\n * @param  { HTMLElement[]] } items - Specifies an array of HTMLElement, from which matches find has done.\n * @param { number } selectedIndex - Specifies the selected item in list item, so that search will happen\n * after selected item otherwise it will do from initial.\n * @param  { boolean } ignoreCase - Specifies the case consideration when search has done.\n */\nexport function incrementalSearch(keyCode, items, selectedIndex, ignoreCase) {\n    queryString += String.fromCharCode(keyCode);\n    setTimeout(function () { queryString = ''; }, 1000);\n    var index;\n    queryString = ignoreCase ? queryString.toLowerCase() : queryString;\n    if (prevString === queryString) {\n        for (var i = 0; i < matches.length; i++) {\n            if (matches[i].classList.contains(activeClass)) {\n                index = i;\n                break;\n            }\n        }\n        index = index + 1;\n        return matches[index];\n    }\n    else {\n        var listItems = items;\n        var strLength = queryString.length;\n        var text = void 0;\n        var item = void 0;\n        selectedIndex = selectedIndex ? selectedIndex + 1 : 0;\n        var i = selectedIndex;\n        matches = [];\n        do {\n            if (i === listItems.length) {\n                i = -1;\n            }\n            i === -1 ? index = 0 : index = i;\n            item = listItems[index];\n            text = ignoreCase ? item.innerText.toLowerCase() : item.innerText;\n            if (text.substr(0, strLength) === queryString) {\n                matches.push(listItems[index]);\n            }\n            i++;\n        } while (i !== selectedIndex);\n        prevString = queryString;\n        return matches[0];\n    }\n}\nexport function Search(inputVal, items, searchType, ignoreCase) {\n    var listItems = items;\n    ignoreCase = ignoreCase !== undefined && ignoreCase !== null ? ignoreCase : true;\n    var itemData = { item: null, index: null };\n    if (inputVal && inputVal.length) {\n        var strLength = inputVal.length;\n        var queryStr = ignoreCase ? inputVal.toLocaleLowerCase() : inputVal;\n        for (var i = 0, itemsData = listItems; i < itemsData.length; i++) {\n            var item = itemsData[i];\n            var text = (ignoreCase ? item.textContent.toLocaleLowerCase() : item.textContent).replace(/^\\s+|\\s+$/g, '');\n            if ((searchType === 'Equal' && text === queryStr) || (searchType === 'StartsWith' && text.substr(0, strLength) === queryStr)) {\n                itemData.item = item;\n                itemData.index = i;\n                return { item: item, index: i };\n            }\n        }\n        return itemData;\n    }\n    return itemData;\n}\n"]},"metadata":{},"sourceType":"module"}