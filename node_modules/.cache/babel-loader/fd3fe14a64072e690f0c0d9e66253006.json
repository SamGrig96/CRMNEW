{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\grigo\\\\OneDrive\\\\\\u0420\\u0430\\u0431\\u043E\\u0447\\u0438\\u0439 \\u0441\\u0442\\u043E\\u043B\\\\CRM\\\\src\\\\components\\\\content\\\\message-list\\\\message-row\\\\MessageRow.jsx\";\nimport React, { PureComponent } from \"react\";\nimport { withRouter } from \"react-router-dom\";\nimport moment, { max } from \"moment\";\nimport MesssageCheckbox from \"./MessageCheckbox\";\nimport NameSubjectFields from \"./NameSubjectFields\";\nimport AttachmentDateFields from \"./AttachmentDateFields\";\nimport { getNameEmail } from '../../../../utils';\nexport class MessageItem extends PureComponent {\n  constructor(props) {\n    super(props);\n    this.onSelectionChange = this.onSelectionChange.bind(this);\n    this.getMessage = this.getMessage.bind(this);\n  }\n\n  onSelectionChange(evt) {\n    this.props.onSelectionChange(evt.target.checked, this.props.data.id);\n  }\n\n  getMessage(evt) {\n    this.props.history.push(`/${this.props.data.id}`); // window.location.reload(); \n  }\n\n  getFromName(from) {\n    const nameEmail = getNameEmail(from);\n    return nameEmail.name;\n  }\n\n  getFormattedDate(date, fallbackDateObj) {\n    let messageDate = moment(date);\n\n    if (!messageDate.isValid()) {\n      messageDate = moment(fallbackDateObj.parserFn(fallbackDateObj.date));\n    }\n\n    const nowDate = moment(new Date());\n    const isMessageFromToday = messageDate.format(\"YYYYMMDD\") === nowDate.format(\"YYYYMMDD\");\n    let formattedDate;\n\n    if (isMessageFromToday) {\n      formattedDate = messageDate.format(\"h:mm A\");\n    } else {\n      if (messageDate.year() !== nowDate.year()) {\n        formattedDate = messageDate.format(\"YYYY/MM/DD\");\n      } else {\n        formattedDate = messageDate.format(\"MMM D\");\n      }\n    }\n\n    return formattedDate;\n  }\n\n  render() {\n    const receivedHeader = this.props.data.payload.headers.find(el => el.name.toUpperCase() === \"X-RECEIVED\");\n    const date = receivedHeader ? receivedHeader.value.split(\";\")[1].trim() : \"\";\n    let formattedDate = this.getFormattedDate(date, {\n      date: this.props.data.internalDate,\n      parserFn: parseInt\n    });\n    const unread = this.props.data.labelIds.indexOf(\"UNREAD\") > -1 ? \" font-weight-bold\" : \"\";\n    const selected = this.props.data.selected ? \" selected\" : \"\";\n    const subjectHeader = this.props.data.payload.headers.find(el => el.name.toUpperCase() === \"SUBJECT\");\n    const subject = subjectHeader ? subjectHeader.value : \"\";\n    const fromHeader = this.props.data.payload.headers.find(el => el.name.toUpperCase() === \"FROM\");\n    let fromName = fromHeader ? this.getFromName(fromHeader.value) : \"undefined\";\n    const style = {\n      width: \"max-content\",\n      textAlign: 'left'\n    };\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: `d-flex table-row-wrapper${selected}`,\n      style: style,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(MesssageCheckbox, {\n      selected: this.props.data.selected,\n      onChange: this.onSelectionChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      onClick: this.getMessage,\n      className: `table-row px-2 py-3${unread}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(NameSubjectFields, {\n      fromName: fromName,\n      subject: subject,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(AttachmentDateFields, {\n      formattedDate: formattedDate,\n      hasAttachment: this.props.data.payload.mimeType === \"multipart/mixed\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 11\n      }\n    })));\n  }\n\n}\nexport default withRouter(MessageItem);","map":{"version":3,"sources":["C:/Users/grigo/OneDrive/Рабочий стол/CRM/src/components/content/message-list/message-row/MessageRow.jsx"],"names":["React","PureComponent","withRouter","moment","max","MesssageCheckbox","NameSubjectFields","AttachmentDateFields","getNameEmail","MessageItem","constructor","props","onSelectionChange","bind","getMessage","evt","target","checked","data","id","history","push","getFromName","from","nameEmail","name","getFormattedDate","date","fallbackDateObj","messageDate","isValid","parserFn","nowDate","Date","isMessageFromToday","format","formattedDate","year","render","receivedHeader","payload","headers","find","el","toUpperCase","value","split","trim","internalDate","parseInt","unread","labelIds","indexOf","selected","subjectHeader","subject","fromHeader","fromName","style","width","textAlign","mimeType"],"mappings":"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","sourcesContent":["import React, { PureComponent } from \"react\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport moment, { max } from \"moment\";\r\nimport MesssageCheckbox from \"./MessageCheckbox\";\r\n\r\nimport NameSubjectFields from \"./NameSubjectFields\";\r\nimport AttachmentDateFields from \"./AttachmentDateFields\";\r\nimport {getNameEmail} from '../../../../utils';\r\n\r\nexport class MessageItem extends PureComponent {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.onSelectionChange = this.onSelectionChange.bind(this);\r\n    this.getMessage = this.getMessage.bind(this);\r\n  }\r\n\r\n  onSelectionChange(evt) {\r\n    this.props.onSelectionChange(evt.target.checked, this.props.data.id);\r\n  }\r\n\r\n  getMessage(evt) {\r\n    this.props.history.push(`/${this.props.data.id}`);\r\n    // window.location.reload(); \r\n  }\r\n\r\n  getFromName(from) {\r\n    const nameEmail = getNameEmail(from);\r\n    return nameEmail.name;\r\n  }\r\n\r\n  getFormattedDate(date, fallbackDateObj) {\r\n    let messageDate = moment(date);\r\n    if (!messageDate.isValid()) {\r\n      messageDate = moment(fallbackDateObj.parserFn(fallbackDateObj.date));\r\n    }\r\n    const nowDate = moment(new Date());\r\n    const isMessageFromToday = messageDate.format(\"YYYYMMDD\") === nowDate.format(\"YYYYMMDD\");\r\n    let formattedDate;\r\n    if (isMessageFromToday) {\r\n      formattedDate = messageDate.format(\"h:mm A\");\r\n    }\r\n    else {\r\n      if (messageDate.year() !== nowDate.year()) {\r\n        formattedDate = messageDate.format(\"YYYY/MM/DD\");\r\n      }\r\n      else {\r\n        formattedDate = messageDate.format(\"MMM D\");\r\n      }\r\n    }\r\n    return formattedDate;\r\n  }\r\n\r\n  render() {\r\n    const receivedHeader = this.props.data.payload.headers.find(el => el.name.toUpperCase() === \"X-RECEIVED\");\r\n    const date = receivedHeader ? receivedHeader.value.split(\";\")[1].trim() : \"\";\r\n    let formattedDate = this.getFormattedDate(date, {date: this.props.data.internalDate, parserFn: parseInt});\r\n    const unread = this.props.data.labelIds.indexOf(\"UNREAD\") > -1 ? \" font-weight-bold\" : \"\";\r\n    const selected = this.props.data.selected ? \" selected\" : \"\";\r\n    const subjectHeader = this.props.data.payload.headers.find(el => el.name.toUpperCase() === \"SUBJECT\");\r\n    const subject = subjectHeader ? subjectHeader.value : \"\";\r\n    const fromHeader = this.props.data.payload.headers.find(el => el.name.toUpperCase() === \"FROM\");\r\n    let fromName = fromHeader ? this.getFromName(fromHeader.value) : \"undefined\";\r\n    const style={width:\"max-content\",textAlign: 'left'}\r\n\r\n    return (\r\n      <div className={ `d-flex table-row-wrapper${selected}`} style={style}>\r\n        <MesssageCheckbox\r\n          selected={this.props.data.selected}\r\n          onChange={this.onSelectionChange}\r\n        />\r\n        <div\r\n          onClick={this.getMessage}\r\n          className={`table-row px-2 py-3${unread}`}\r\n        >\r\n          <NameSubjectFields fromName={fromName} subject={subject} />\r\n          <AttachmentDateFields\r\n            formattedDate={formattedDate}\r\n            hasAttachment={\r\n              this.props.data.payload.mimeType === \"multipart/mixed\"\r\n            }\r\n          />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withRouter(MessageItem);\r\n"]},"metadata":{},"sourceType":"module"}