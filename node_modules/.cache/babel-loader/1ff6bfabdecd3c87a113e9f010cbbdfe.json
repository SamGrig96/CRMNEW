{"ast":null,"code":"import _objectWithoutProperties from \"C:\\\\Users\\\\grigo\\\\OneDrive\\\\\\u0420\\u0430\\u0431\\u043E\\u0447\\u0438\\u0439 \\u0441\\u0442\\u043E\\u043B\\\\CRM\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectWithoutProperties\";\nimport _objectSpread from \"C:\\\\Users\\\\grigo\\\\OneDrive\\\\\\u0420\\u0430\\u0431\\u043E\\u0447\\u0438\\u0439 \\u0441\\u0442\\u043E\\u043B\\\\CRM\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport { GET_MESSAGES, GET_MESSAGES_FAILED, TOGGLE_SELECTED, MESSAGE_LOAD_IN_PROGRESS, MESSAGE_LOAD_SUCCESS, MESSAGE_LOAD_FAIL, GET_MESSAGES_LOAD_IN_PROGRESS, EMPTY_MESSAGES, SET_PAGE_TOKENS, ADD_INITIAL_PAGE_TOKEN, CLEAR_PAGE_TOKENS, MODIFY_MESSAGES_SUCCESS, SET_SEARCH_QUERY } from \"../actions/message-list.actions\";\nconst defaultMessagesState = {\n  messages: [],\n  loading: true,\n  pageTokens: []\n};\nexport const messagesResult = (state = defaultMessagesState, action) => {\n  switch (action.type) {\n    case GET_MESSAGES:\n      const stateClone = _objectSpread({}, state);\n\n      stateClone.nextPageToken = null;\n      const pageTokens = [...stateClone.pageTokens];\n      const nextPageToken = action.payload.nextPageToken;\n\n      if (nextPageToken && pageTokens.indexOf(nextPageToken) === -1) {\n        pageTokens.push(nextPageToken);\n      }\n\n      return _objectSpread({}, stateClone, {}, action.payload, {\n        loading: false,\n        pageTokens: pageTokens\n      });\n\n    case GET_MESSAGES_FAILED:\n      {\n        return _objectSpread({}, state, {\n          loading: false,\n          failed: true,\n          error: action.payload\n        });\n      }\n\n    case EMPTY_MESSAGES:\n      return _objectSpread({}, state, {\n        messages: []\n      });\n\n    case GET_MESSAGES_LOAD_IN_PROGRESS:\n      return _objectSpread({}, state, {\n        label: null,\n        nextPageToken: null,\n        loading: true\n      });\n\n    case TOGGLE_SELECTED:\n      return _objectSpread({}, state, {\n        messages: state.messages.map(el => {\n          if (action.payload.messageIds.indexOf(el.id) > -1) {\n            return _objectSpread({}, el, {\n              selected: action.payload.selected\n            });\n          }\n\n          return el;\n        })\n      });\n\n    case ADD_INITIAL_PAGE_TOKEN:\n      return _objectSpread({}, state, {\n        pageTokens: [action.payload]\n      });\n\n    case CLEAR_PAGE_TOKENS:\n      return _objectSpread({}, state, {\n        pageTokens: []\n      });\n\n    case MODIFY_MESSAGES_SUCCESS:\n      return _objectSpread({}, state, {\n        messages: state.messages.filter(el => action.payload.modifiedIds.indexOf(el.id) === -1)\n      });\n\n    default:\n      return state;\n  }\n};\nexport const pageTokens = (state = {\n  prevPageToken: \"\",\n  nextPageToken: \"\"\n}, action) => {\n  switch (action.type) {\n    case SET_PAGE_TOKENS:\n      return _objectSpread({}, state, {}, action.payload);\n\n    default:\n      return state;\n  }\n};\nconst defaultEmailMessageResult = {\n  body: \"\",\n  loading: false,\n  failed: false\n};\nexport const emailMessageResult = (state = defaultEmailMessageResult, action) => {\n  switch (action.type) {\n    case GET_MESSAGES_LOAD_IN_PROGRESS:\n    case MESSAGE_LOAD_IN_PROGRESS:\n      return _objectSpread({}, state, {\n        body: \"\",\n        loading: true,\n        failed: false\n      });\n\n    case MESSAGE_LOAD_SUCCESS:\n      const _action$payload = action.payload,\n            body = _action$payload.body,\n            rest = _objectWithoutProperties(_action$payload, [\"body\"]);\n\n      return _objectSpread({}, state, {}, action.payload, {\n        loading: false,\n        failed: false\n      });\n\n    case MESSAGE_LOAD_FAIL:\n      return _objectSpread({}, state, {\n        loading: false,\n        failed: true,\n        error: action.payload\n      });\n\n    default:\n      return state;\n  }\n};\nexport const searchQuery = (state = \"\", action) => {\n  switch (action.type) {\n    case SET_SEARCH_QUERY:\n      return action.payload;\n\n    default:\n      return state;\n  }\n};","map":{"version":3,"sources":["C:/Users/grigo/OneDrive/Рабочий стол/CRM/src/components/content/message-list/reducers/message-list.reducers.jsx"],"names":["GET_MESSAGES","GET_MESSAGES_FAILED","TOGGLE_SELECTED","MESSAGE_LOAD_IN_PROGRESS","MESSAGE_LOAD_SUCCESS","MESSAGE_LOAD_FAIL","GET_MESSAGES_LOAD_IN_PROGRESS","EMPTY_MESSAGES","SET_PAGE_TOKENS","ADD_INITIAL_PAGE_TOKEN","CLEAR_PAGE_TOKENS","MODIFY_MESSAGES_SUCCESS","SET_SEARCH_QUERY","defaultMessagesState","messages","loading","pageTokens","messagesResult","state","action","type","stateClone","nextPageToken","payload","indexOf","push","failed","error","label","map","el","messageIds","id","selected","filter","modifiedIds","prevPageToken","defaultEmailMessageResult","body","emailMessageResult","rest","searchQuery"],"mappings":"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","sourcesContent":["import {\r\n  GET_MESSAGES,\r\n  GET_MESSAGES_FAILED,\r\n  TOGGLE_SELECTED,\r\n  MESSAGE_LOAD_IN_PROGRESS,\r\n  MESSAGE_LOAD_SUCCESS,\r\n  MESSAGE_LOAD_FAIL,\r\n  GET_MESSAGES_LOAD_IN_PROGRESS,\r\n  EMPTY_MESSAGES,\r\n  SET_PAGE_TOKENS,\r\n  ADD_INITIAL_PAGE_TOKEN,\r\n  CLEAR_PAGE_TOKENS,\r\n  MODIFY_MESSAGES_SUCCESS,\r\n  SET_SEARCH_QUERY\r\n} from \"../actions/message-list.actions\";\r\n\r\nconst defaultMessagesState = {\r\n  messages: [],\r\n  loading: true,\r\n  pageTokens: []\r\n};\r\n\r\nexport const messagesResult = (state = defaultMessagesState, action) => {\r\n  switch (action.type) {\r\n    case GET_MESSAGES:\r\n      const stateClone = {...state};\r\n      stateClone.nextPageToken = null;\r\n      const pageTokens = [...stateClone.pageTokens];\r\n      const nextPageToken = action.payload.nextPageToken;\r\n      if (nextPageToken && pageTokens.indexOf(nextPageToken) === -1) {\r\n        pageTokens.push(nextPageToken);\r\n      }\r\n      return {\r\n        ...stateClone,\r\n        ...action.payload,\r\n        loading: false,\r\n        pageTokens: pageTokens\r\n      };\r\n    case GET_MESSAGES_FAILED: {\r\n      return {\r\n        ...state,\r\n        loading: false,\r\n        failed: true,\r\n        error: action.payload\r\n      }\r\n    }\r\n    case EMPTY_MESSAGES:\r\n      return {...state, messages: []};\r\n    case GET_MESSAGES_LOAD_IN_PROGRESS:\r\n      return {\r\n        ...state,\r\n        label: null,\r\n        nextPageToken: null,\r\n        loading: true\r\n      }\r\n    case TOGGLE_SELECTED:\r\n      return {\r\n        ...state,\r\n        messages: state.messages.map(el => {\r\n          if (action.payload.messageIds.indexOf(el.id) > -1) {\r\n            return { ...el, selected: action.payload.selected };\r\n          }\r\n          return el;\r\n        })\r\n      };\r\n    case ADD_INITIAL_PAGE_TOKEN:\r\n      return {\r\n        ...state,\r\n        pageTokens: [action.payload]\r\n      }\r\n    case CLEAR_PAGE_TOKENS:\r\n      return {\r\n        ...state,\r\n        pageTokens: []\r\n      }\r\n    case MODIFY_MESSAGES_SUCCESS:\r\n      return {\r\n        ...state,\r\n        messages: state.messages.filter(el => action.payload.modifiedIds.indexOf(el.id) === -1)\r\n      }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const pageTokens = (\r\n  state = { prevPageToken: \"\", nextPageToken: \"\" },\r\n  action\r\n) => {\r\n  switch (action.type) {\r\n    case SET_PAGE_TOKENS:\r\n      return {...state, ...action.payload};\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst defaultEmailMessageResult = {\r\n  body: \"\",\r\n  loading: false,\r\n  failed: false\r\n};\r\n\r\nexport const emailMessageResult = (\r\n  state = defaultEmailMessageResult,\r\n  action\r\n) => {\r\n  switch (action.type) {\r\n    case GET_MESSAGES_LOAD_IN_PROGRESS:\r\n    case MESSAGE_LOAD_IN_PROGRESS:\r\n      return { ...state, body: \"\", loading: true, failed: false };\r\n    case MESSAGE_LOAD_SUCCESS:\r\n      const {body, ...rest} = action.payload;\r\n      return {\r\n        ...state,\r\n        ...action.payload,\r\n        loading: false,\r\n        failed: false\r\n      };\r\n    case MESSAGE_LOAD_FAIL:\r\n      return {\r\n        ...state,\r\n        loading: false,\r\n        failed: true,\r\n        error: action.payload\r\n      }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const searchQuery = (state = \"\", action) => {\r\n  switch(action.type) {\r\n    case SET_SEARCH_QUERY:\r\n      return action.payload\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}