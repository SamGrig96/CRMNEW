{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\grigo\\\\OneDrive\\\\\\u0420\\u0430\\u0431\\u043E\\u0447\\u0438\\u0439 \\u0441\\u0442\\u043E\\u043B\\\\CRM\\\\src\\\\components\\\\main\\\\Main.jsx\";\nimport React, { Component, Fragment } from \"react\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators, compose } from \"redux\";\nimport Header from \"../header/Header\";\nimport Sidebar from \"../sidebar/Sidebar\";\nimport NotFound from \"../not-found/NotFound\";\nimport MessageList from \"../content/message-list/MessageList\";\nimport MessageContent from \"../content/message-list/message-content/MessageContent\";\nimport { Route, Switch, withRouter } from \"react-router-dom\";\nimport { getLabels } from \"../sidebar/sidebar.actions\";\nimport { getLabelMessages, emptyLabelMessages, toggleSelected, setPageTokens, addInitialPageToken, clearPageTokens, setSearchQuery } from \"../content/message-list/actions/message-list.actions\";\nimport { selectLabel } from '../sidebar/sidebar.actions';\nimport { signOut } from '../../api/authentication';\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faSpinner } from \"@fortawesome/free-solid-svg-icons\";\nexport class Main extends Component {\n  constructor(props) {\n    super(props);\n    this.getLabelList = this.getLabelList.bind(this);\n    this.getLabelMessages = this.getLabelMessages.bind(this);\n    this.renderLabelRoutes = this.renderLabelRoutes.bind(this);\n    this.loadLabelMessages = this.loadLabelMessages.bind(this);\n    this.navigateToNextPage = this.navigateToNextPage.bind(this);\n    this.navigateToPrevPage = this.navigateToPrevPage.bind(this);\n    this.addInitialPageToken = this.addInitialPageToken.bind(this);\n    this.onSignout = this.onSignout.bind(this);\n  }\n\n  componentDidMount() {\n    /* Label list is fetched from here \r\n    so that we can declare Routes by labelId \r\n    before rendering anything else */\n    this.getLabelList();\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevProps.signedInUser !== this.props.signedInUser) {\n      this.setState({\n        signedInUser: this.props.signedInUser\n      });\n    }\n\n    const labels = this.props.labelsResult.labels;\n    const pathname = this.props.location.pathname;\n    const selectedLabel = labels.find(el => el.selected);\n    const labelPathMatch = labels.find(el => el.id.toLowerCase() === pathname.slice(1));\n    console.log(pathname, \"pathname\");\n\n    if (!selectedLabel) {\n      if (labelPathMatch && this.props.searchQuery === \"\") {\n        this.props.selectLabel(labelPathMatch.id);\n      }\n    } else {\n      if (labelPathMatch && selectedLabel.id !== labelPathMatch.id) {\n        this.props.selectLabel(labelPathMatch.id);\n      }\n    }\n  }\n\n  getClickHandler(action) {\n    return evt => {\n      this.props.onClick(action);\n    };\n  }\n\n  navigateToNextPage(token) {\n    const searchParam = this.props.location.search;\n    const currentToken = searchParam.indexOf(\"?\") === 0 ? searchParam.slice(1) : \"\";\n    this.props.setPageTokens({\n      prevPageToken: currentToken\n    });\n    this.props.history.push(token);\n  }\n\n  navigateToPrevPage(token) {\n    this.props.history.push(token);\n  }\n\n  loadLabelMessages(label) {\n    const currentSearchQuery = this.props.searchQuery;\n    this.props.clearPageTokens();\n    this.props.selectLabel(label.id);\n    const newPathToPush = `/${label.id.toLowerCase()}`;\n\n    if (currentSearchQuery && currentSearchQuery !== \"\") {\n      this.props.setSearchQuery(\"\");\n      const pathname = this.props.location.pathname;\n\n      if (newPathToPush === pathname) {\n        this.getLabelMessages({\n          labelIds: [label.id]\n        });\n        return;\n      }\n    }\n\n    this.props.history.push(`/${label.id.toLowerCase()}`);\n  }\n\n  getLabelList() {\n    this.props.getLabels();\n  }\n\n  getLabelMessages({\n    labelIds,\n    q,\n    pageToken\n  }) {\n    this.props.emptyLabelMessages();\n    this.props.getLabelMessages({\n      labelIds,\n      q,\n      pageToken\n    });\n  }\n\n  addInitialPageToken(token) {\n    this.props.addInitialPageToken(token);\n  }\n\n  renderLabelRoutes() {\n    return this.props.labelsResult.labels.map(el => React.createElement(Route, {\n      key: el.id + '_route',\n      exact: true,\n      path: \"/\" + el.id,\n      render: props => {\n        const that = this;\n        return React.createElement(MessageList, Object.assign({}, props, {\n          getLabelMessages: this.getLabelMessages,\n          messagesResult: this.props.messagesResult,\n          toggleSelected: this.props.toggleSelected,\n          navigateToNextPage: this.navigateToNextPage,\n          navigateToPrevPage: this.navigateToPrevPage,\n          pageTokens: this.props.pageTokens,\n          addInitialPageToken: this.addInitialPageToken,\n          parentLabel: that.props.labelsResult.labels.find(el => el.id === props.match.path.slice(1)),\n          searchQuery: this.props.searchQuery,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 147\n          },\n          __self: this\n        }));\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    }));\n  }\n\n  renderSpinner() {\n    return React.createElement(\"div\", {\n      className: \"d-flex h-100 align-items-center justify-content-center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167\n      },\n      __self: this\n    }, React.createElement(FontAwesomeIcon, {\n      icon: faSpinner,\n      spin: true,\n      size: \"5x\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168\n      },\n      __self: this\n    }));\n  }\n\n  onSignout() {\n    const that = this;\n    signOut().then(_ => {\n      that.props.history.replace('inbox');\n      window.location.reload(true);\n    });\n  }\n\n  renderInboxViewport() {\n    if (this.props.labelsResult.labels.length < 1) {\n      return this.renderSpinner();\n    }\n\n    return React.createElement(Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188\n      },\n      __self: this\n    }, React.createElement(Header, {\n      googleUser: this.props.googleUser,\n      onSignout: this.onSignout,\n      setSearchQuery: this.props.setSearchQuery,\n      getLabelMessages: this.getLabelMessages,\n      searchQuery: this.props.searchQuery,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189\n      },\n      __self: this\n    }), React.createElement(Sidebar, {\n      getLabelList: this.getLabelList,\n      pathname: this.props.location.pathname,\n      labelsResult: this.props.labelsResult,\n      onLabelClick: this.loadLabelMessages,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198\n      },\n      __self: this\n    }), React.createElement(\"article\", {\n      className: \"d-flex flex-column  \",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204\n      },\n      __self: this\n    }, React.createElement(Switch, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206\n      },\n      __self: this\n    }, this.renderLabelRoutes(), React.createElement(Route, {\n      exact: true,\n      path: \"/notfound\",\n      component: NotFound,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208\n      },\n      __self: this\n    }), React.createElement(Route, {\n      exact: true,\n      path: \"/:id([a-zA-Z0-9]+)\",\n      component: MessageContent,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213\n      },\n      __self: this\n    }))));\n  }\n\n  render() {\n    return this.renderInboxViewport();\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  labelsResult: state.labelsResult,\n  messagesResult: state.messagesResult,\n  pageTokens: state.pageTokens,\n  searchQuery: state.searchQuery\n});\n\nconst mapDispatchToProps = dispatch => bindActionCreators({\n  getLabels,\n  getLabelMessages,\n  emptyLabelMessages,\n  toggleSelected,\n  selectLabel,\n  setPageTokens,\n  addInitialPageToken,\n  clearPageTokens,\n  setSearchQuery\n}, dispatch);\n\nexport default compose(withRouter, connect(mapStateToProps, mapDispatchToProps))(Main);","map":{"version":3,"sources":["C:/Users/grigo/OneDrive/Рабочий стол/CRM/src/components/main/Main.jsx"],"names":["React","Component","Fragment","connect","bindActionCreators","compose","Header","Sidebar","NotFound","MessageList","MessageContent","Route","Switch","withRouter","getLabels","getLabelMessages","emptyLabelMessages","toggleSelected","setPageTokens","addInitialPageToken","clearPageTokens","setSearchQuery","selectLabel","signOut","FontAwesomeIcon","faSpinner","Main","constructor","props","getLabelList","bind","renderLabelRoutes","loadLabelMessages","navigateToNextPage","navigateToPrevPage","onSignout","componentDidMount","componentDidUpdate","prevProps","prevState","signedInUser","setState","labels","labelsResult","pathname","location","selectedLabel","find","el","selected","labelPathMatch","id","toLowerCase","slice","console","log","searchQuery","getClickHandler","action","evt","onClick","token","searchParam","search","currentToken","indexOf","prevPageToken","history","push","label","currentSearchQuery","newPathToPush","labelIds","q","pageToken","map","that","messagesResult","pageTokens","match","path","renderSpinner","then","_","replace","window","reload","renderInboxViewport","length","googleUser","render","mapStateToProps","state","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { Component, Fragment } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { bindActionCreators, compose } from \"redux\";\r\nimport Header from \"../header/Header\";\r\nimport Sidebar from \"../sidebar/Sidebar\";\r\nimport NotFound from \"../not-found/NotFound\";\r\n\r\nimport MessageList from \"../content/message-list/MessageList\";\r\nimport MessageContent from \"../content/message-list/message-content/MessageContent\";\r\n\r\nimport { Route, Switch, withRouter} from \"react-router-dom\";\r\n\r\nimport { getLabels } from \"../sidebar/sidebar.actions\";\r\n\r\nimport {\r\n  getLabelMessages,\r\n  emptyLabelMessages,\r\n  toggleSelected,\r\n  setPageTokens,\r\n  addInitialPageToken,\r\n  clearPageTokens,\r\n  setSearchQuery\r\n} from \"../content/message-list/actions/message-list.actions\";\r\n\r\nimport {selectLabel} from '../sidebar/sidebar.actions';\r\nimport {signOut} from '../../api/authentication';\r\n\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faSpinner } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\n\r\nexport class Main extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.getLabelList = this.getLabelList.bind(this);\r\n    this.getLabelMessages = this.getLabelMessages.bind(this);\r\n    this.renderLabelRoutes = this.renderLabelRoutes.bind(this);\r\n    this.loadLabelMessages = this.loadLabelMessages.bind(this);\r\n    this.navigateToNextPage = this.navigateToNextPage.bind(this);\r\n    this.navigateToPrevPage = this.navigateToPrevPage.bind(this);\r\n    this.addInitialPageToken = this.addInitialPageToken.bind(this);\r\n    this.onSignout = this.onSignout.bind(this);\r\n\r\n  \r\n  }\r\n\r\n \r\n  componentDidMount() {\r\n    /* Label list is fetched from here \r\n    so that we can declare Routes by labelId \r\n    before rendering anything else */\r\n    this.getLabelList();\r\n    \r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    if (prevProps.signedInUser !== this.props.signedInUser) {\r\n      this.setState({\r\n        signedInUser: this.props.signedInUser\r\n      });\r\n    }\r\n     \r\n    const {labels} = this.props.labelsResult;\r\n    const {pathname} = this.props.location;\r\n    const selectedLabel = labels.find(el => el.selected);\r\n    const labelPathMatch = labels.find(el => el.id.toLowerCase() === pathname.slice(1));\r\n    \r\n    \r\n    console.log(pathname,\"pathname\")\r\n    if (!selectedLabel) {\r\n      if (labelPathMatch && this.props.searchQuery === \"\") {\r\n        this.props.selectLabel(labelPathMatch.id);\r\n      }      \r\n    }\r\n    else {\r\n      if (labelPathMatch && selectedLabel.id !== labelPathMatch.id) {\r\n        this.props.selectLabel(labelPathMatch.id);\r\n      } \r\n    }\r\n  }\r\n\r\n  getClickHandler(action) {\r\n   \r\nreturn evt => {\r\n      this.props.onClick(action);\r\n    };\r\n  }\r\n  navigateToNextPage(token) {\r\n    const searchParam = this.props.location.search;\r\n    const currentToken = searchParam.indexOf(\"?\") === 0 ? searchParam.slice(1) : \"\";\r\n    this.props.setPageTokens({\r\n      prevPageToken: currentToken\r\n    });\r\n    this.props.history.push(token);\r\n  }\r\n\r\n  navigateToPrevPage(token) {\r\n    this.props.history.push(token);\r\n  }\r\n\r\n  loadLabelMessages(label) {\r\n    \r\n    const currentSearchQuery = this.props.searchQuery;\r\n    this.props.clearPageTokens();\r\n    this.props.selectLabel(label.id);    \r\n\r\n    const newPathToPush = `/${label.id.toLowerCase()}`;\r\n\r\n    if (currentSearchQuery && currentSearchQuery !== \"\") {\r\n      this.props.setSearchQuery(\"\");\r\n      const {pathname} = this.props.location;\r\n      if (newPathToPush === pathname) {\r\n        this.getLabelMessages({labelIds: [label.id] });\r\n        return;\r\n      }\r\n    }\r\n\r\n    this.props.history.push(`/${label.id.toLowerCase()}`);\r\n  }\r\n  \r\n\r\n  getLabelList() {\r\n    this.props.getLabels();\r\n  }\r\n\r\n  getLabelMessages({labelIds, q, pageToken}) {\r\n    this.props.emptyLabelMessages();    \r\n    this.props.getLabelMessages({labelIds, q, pageToken});\r\n  }\r\n\r\n\r\n  addInitialPageToken(token) {\r\n    this.props.addInitialPageToken(token);\r\n  }\r\n\r\n  renderLabelRoutes() {\r\n\r\n    return this.props.labelsResult.labels.map(el => (\r\n      <Route\r\n        key={el.id + '_route'}\r\n        exact\r\n        path={\"/\" + el.id}\r\n        render={props => {          \r\n          const that = this;\r\n          return (\r\n            <MessageList\r\n              {...props}\r\n              getLabelMessages={this.getLabelMessages}\r\n              messagesResult={this.props.messagesResult}\r\n              toggleSelected={this.props.toggleSelected}\r\n              navigateToNextPage={this.navigateToNextPage}\r\n              navigateToPrevPage={this.navigateToPrevPage}\r\n              pageTokens={this.props.pageTokens}\r\n              addInitialPageToken={this.addInitialPageToken}\r\n              parentLabel={that.props.labelsResult.labels.find(el => el.id === props.match.path.slice(1) )}\r\n              searchQuery={this.props.searchQuery}\r\n            />\r\n          )\r\n        }}\r\n      />\r\n    ));    \r\n  }\r\n\r\n  renderSpinner() {\r\n    return (\r\n      <div className=\"d-flex h-100 align-items-center justify-content-center\">\r\n        <FontAwesomeIcon icon={faSpinner} spin size=\"5x\" />\r\n      </div>\r\n    )\r\n  }\r\n\r\n  onSignout() {\r\n    const that = this;\r\n    signOut().then(_ => {\r\n      that.props.history.replace('inbox');\r\n      window.location.reload(true);\r\n    })\r\n  }\r\n\r\n  renderInboxViewport() {\r\n\r\n    if (this.props.labelsResult.labels.length < 1) {\r\n      return this.renderSpinner();\r\n    }\r\n\r\n    return (\r\n      <Fragment>\r\n        <Header \r\n       googleUser={this.props.googleUser} \r\n         onSignout={this.onSignout} \r\n         setSearchQuery={this.props.setSearchQuery}\r\n         getLabelMessages={this.getLabelMessages} \r\n          searchQuery={this.props.searchQuery}\r\n        />\r\n        {/* <section className=\"main hbox space-between\"> */}\r\n         \r\n          <Sidebar\r\n            getLabelList={this.getLabelList}\r\n            pathname={this.props.location.pathname}\r\n            labelsResult={this.props.labelsResult}\r\n            onLabelClick={this.loadLabelMessages}\r\n          />\r\n          <article className=\"d-flex flex-column  \">\r\n         \r\n            <Switch>\r\n              {this.renderLabelRoutes()}\r\n              <Route\r\n                exact\r\n                path=\"/notfound\"\r\n                component={NotFound}\r\n              />\r\n              <Route\r\n                exact\r\n                path=\"/:id([a-zA-Z0-9]+)\"\r\n                component={MessageContent}\r\n              />\r\n            </Switch>\r\n          </article>\r\n        {/* </section> */}\r\n      </Fragment>\r\n    );\r\n  }\r\n\r\n  render() {\r\n    return this.renderInboxViewport();\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  labelsResult: state.labelsResult,\r\n  messagesResult: state.messagesResult,\r\n  pageTokens: state.pageTokens,\r\n  searchQuery: state.searchQuery\r\n});\r\n\r\nconst mapDispatchToProps = dispatch =>\r\n  bindActionCreators(\r\n    {\r\n      getLabels,\r\n      getLabelMessages,\r\n      emptyLabelMessages,\r\n      toggleSelected,\r\n      selectLabel,\r\n      setPageTokens,\r\n      addInitialPageToken,\r\n      clearPageTokens,\r\n      setSearchQuery\r\n    },\r\n    dispatch\r\n  );\r\n\r\nexport default compose(\r\n  withRouter,\r\n  connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n  )\r\n)(Main);\r\n"]},"metadata":{},"sourceType":"module"}