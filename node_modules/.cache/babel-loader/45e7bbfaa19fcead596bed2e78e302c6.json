{"ast":null,"code":"export var signIn=function signIn(){return window.gapi.auth2.getAuthInstance().signIn();};export var myGapi=function myGapi(){var myGapi=JSON.stringify(window.gapi);};myGapi();export var initGmailClient=function initGmailClient(apiKey,clientId){var API_KEY=process.env.REACT_APP_API_KEY;var CLIENT_ID=process.env.REACT_APP_CLIENT_ID;// Array of API discovery doc URLs for APIs\nvar DISCOVERY_DOCS=[\"https://www.googleapis.com/discovery/v1/apis/gmail/v1/rest\"];// Authorization scopes required by the API; multiple scopes can be\n// included, separated by spaces.\n// More info: https://developers.google.com/identity/protocols/googlescopes\nvar SCOPES=\"https://mail.google.com/\";// Scope for Read, send, delete, and manage your email\nvar gapi=window.gapi;return gapi.client.init({apiKey:API_KEY,clientId:CLIENT_ID,discoveryDocs:DISCOVERY_DOCS,scope:SCOPES});};export var checkSignInStatus=function checkSignInStatus(){return new Promise(function(resolve,reject){initGmailClient().then(function(_){var gapi=window.gapi;console.log(gapi,\"gapi1\");var googleAuthInstance=gapi.auth2.getAuthInstance();var isSignedIn=googleAuthInstance.isSignedIn.get();if(isSignedIn){// Listen for sign-in state changes.\ngoogleAuthInstance.isSignedIn.listen(function(isSignedIn){updateSigninStatus(isSignedIn);});console.log(\"AUTH_SUCCESS from checkSignInStatus\");resolve(googleAuthInstance.currentUser.Ab);}else{reject();}}).catch(function(error){reject(error);});});};// Listener for sign-in state\nexport var updateSigninStatus=function updateSigninStatus(isSignedIn){if(!isSignedIn){// TODO: react to logged out status\n}};export var signOut=function signOut(){return window.gapi.auth2.getAuthInstance().signOut();};","map":{"version":3,"sources":["C:/Users/grigo/OneDrive/Рабочий стол/CRM/src/api/authentication.jsx"],"names":["signIn","window","gapi","auth2","getAuthInstance","myGapi","JSON","stringify","initGmailClient","apiKey","clientId","API_KEY","process","env","REACT_APP_API_KEY","CLIENT_ID","REACT_APP_CLIENT_ID","DISCOVERY_DOCS","SCOPES","client","init","discoveryDocs","scope","checkSignInStatus","Promise","resolve","reject","then","_","console","log","googleAuthInstance","isSignedIn","get","listen","updateSigninStatus","currentUser","Ab","catch","error","signOut"],"mappings":"AAAA,MAAO,IAAMA,CAAAA,MAAM,CAAG,QAATA,CAAAA,MAAS,EAAM,CAC1B,MAAOC,CAAAA,MAAM,CAACC,IAAP,CAAYC,KAAZ,CACJC,eADI,GAEJJ,MAFI,EAAP,CAID,CALM,CAOP,MAAO,IAAMK,CAAAA,MAAM,CAAC,iBAAI,CACtB,GAAIA,CAAAA,MAAM,CAACC,IAAI,CAACC,SAAL,CAAeN,MAAM,CAACC,IAAtB,CAAX,CAED,CAHM,CAKPG,MAAM,GAEN,MAAO,IAAMG,CAAAA,eAAe,CAAG,QAAlBA,CAAAA,eAAkB,CAACC,MAAD,CAASC,QAAT,CAAsB,CACnD,GAAMC,CAAAA,OAAO,CAAGC,OAAO,CAACC,GAAR,CAAYC,iBAA5B,CACA,GAAMC,CAAAA,SAAS,CAAGH,OAAO,CAACC,GAAR,CAAYG,mBAA9B,CAEA;AACA,GAAMC,CAAAA,cAAc,CAAG,CACrB,4DADqB,CAAvB,CAIA;AACA;AACA;AACA,GAAMC,CAAAA,MAAM,CAAG,0BAAf,CAA2C;AAE3C,GAAIhB,CAAAA,IAAI,CAAGD,MAAM,CAACC,IAAlB,CAEA,MAAOA,CAAAA,IAAI,CAACiB,MAAL,CAAYC,IAAZ,CAAiB,CACtBX,MAAM,CAAEE,OADc,CAEtBD,QAAQ,CAAEK,SAFY,CAGtBM,aAAa,CAAEJ,cAHO,CAItBK,KAAK,CAAEJ,MAJe,CAAjB,CAAP,CAMD,CAtBM,CAwBP,MAAO,IAAMK,CAAAA,iBAAiB,CAAG,QAApBA,CAAAA,iBAAoB,EAAM,CAErC,MAAO,IAAIC,CAAAA,OAAJ,CAAY,SAACC,OAAD,CAAUC,MAAV,CAAqB,CACtClB,eAAe,GAAGmB,IAAlB,CAAuB,SAAAC,CAAC,CAAG,CACzB,GAAI1B,CAAAA,IAAI,CAAGD,MAAM,CAACC,IAAlB,CACA2B,OAAO,CAACC,GAAR,CAAY5B,IAAZ,CAAiB,OAAjB,EAEA,GAAM6B,CAAAA,kBAAkB,CAAG7B,IAAI,CAACC,KAAL,CAAWC,eAAX,EAA3B,CAEA,GAAM4B,CAAAA,UAAU,CAAGD,kBAAkB,CAACC,UAAnB,CAA8BC,GAA9B,EAAnB,CAEA,GAAID,UAAJ,CAAgB,CACd;AACAD,kBAAkB,CAACC,UAAnB,CAA8BE,MAA9B,CAAqC,SAAAF,UAAU,CAAI,CACjDG,kBAAkB,CAACH,UAAD,CAAlB,CACD,CAFD,EAIAH,OAAO,CAACC,GAAR,CAAY,qCAAZ,EAEAL,OAAO,CAACM,kBAAkB,CAACK,WAAnB,CAA+BC,EAAhC,CAAP,CAED,CAVD,IAUO,CACLX,MAAM,GACP,CACF,CArBD,EAsBGY,KAtBH,CAsBS,SAAAC,KAAK,CAAI,CACdb,MAAM,CAACa,KAAD,CAAN,CACD,CAxBH,EA2BD,CA5BM,CAAP,CAgCD,CAlCM,CAoCP;AACA,MAAO,IAAMJ,CAAAA,kBAAkB,CAAG,QAArBA,CAAAA,kBAAqB,CAACH,UAAD,CAAgB,CAChD,GAAI,CAACA,UAAL,CAAiB,CACf;AACD,CACF,CAJM,CAMP,MAAO,IAAMQ,CAAAA,OAAO,CAAG,QAAVA,CAAAA,OAAU,EAAM,CAC3B,MAAOvC,CAAAA,MAAM,CAACC,IAAP,CAAYC,KAAZ,CACJC,eADI,GAEJoC,OAFI,EAAP,CAGD,CAJM","sourcesContent":["export const signIn = () => {\r\n  return window.gapi.auth2\r\n    .getAuthInstance()\r\n    .signIn()\r\n    \r\n}\r\n\r\nexport const myGapi=()=>{\r\n  let myGapi=JSON.stringify(window.gapi)\r\n\r\n}\r\n\r\nmyGapi()\r\n\r\nexport const initGmailClient = (apiKey, clientId) => {\r\n  const API_KEY = process.env.REACT_APP_API_KEY;\r\n  const CLIENT_ID = process.env.REACT_APP_CLIENT_ID;\r\n\r\n  // Array of API discovery doc URLs for APIs\r\n  const DISCOVERY_DOCS = [\r\n    \"https://www.googleapis.com/discovery/v1/apis/gmail/v1/rest\"\r\n  ];\r\n\r\n  // Authorization scopes required by the API; multiple scopes can be\r\n  // included, separated by spaces.\r\n  // More info: https://developers.google.com/identity/protocols/googlescopes\r\n  const SCOPES = \"https://mail.google.com/\"; // Scope for Read, send, delete, and manage your email\r\n\r\n  let gapi = window.gapi;\r\n\r\n  return gapi.client.init({\r\n    apiKey: API_KEY,\r\n    clientId: CLIENT_ID,\r\n    discoveryDocs: DISCOVERY_DOCS,\r\n    scope: SCOPES\r\n  });\r\n};\r\n\r\nexport const checkSignInStatus = () => {  \r\n\r\n  return new Promise((resolve, reject) => {\r\n    initGmailClient().then(_=> {\r\n      let gapi = window.gapi;\r\n      console.log(gapi,\"gapi1\")\r\n      \r\n      const googleAuthInstance = gapi.auth2.getAuthInstance();\r\n      \r\n      const isSignedIn = googleAuthInstance.isSignedIn.get();\r\n\r\n      if (isSignedIn) {\r\n        // Listen for sign-in state changes.\r\n        googleAuthInstance.isSignedIn.listen(isSignedIn => {\r\n          updateSigninStatus(isSignedIn);\r\n        });\r\n        \r\n        console.log(\"AUTH_SUCCESS from checkSignInStatus\");\r\n\r\n        resolve(googleAuthInstance.currentUser.Ab);\r\n\r\n      } else {\r\n        reject();\r\n      }\r\n    })\r\n      .catch(error => {\r\n        reject(error);\r\n      });\r\n  \r\n  \r\n  })\r\n\r\n\r\n \r\n};\r\n\r\n// Listener for sign-in state\r\nexport const updateSigninStatus = (isSignedIn) => {\r\n  if (!isSignedIn) {\r\n    // TODO: react to logged out status\r\n  }\r\n};\r\n\r\nexport const signOut = () => {\r\n  return window.gapi.auth2\r\n    .getAuthInstance()\r\n    .signOut()\r\n};"]},"metadata":{},"sourceType":"module"}